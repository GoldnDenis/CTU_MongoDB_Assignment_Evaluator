2025-01-10T00:02:12.083+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 19888 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T00:02:12.086+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T00:02:13.310+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T00:02:13.314+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T00:02:13.580+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 254 ms. Found 5 JPA repository interfaces.
2025-01-10T00:02:14.428+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T00:02:14.451+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T00:02:14.451+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T00:02:14.573+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T00:02:14.573+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2417 ms
2025-01-10T00:02:14.844+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T00:02:15.226+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:835214ba-8fdb-46e9-91a0-1c4d36d83740 user=SA
2025-01-10T00:02:15.229+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T00:02:15.306+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T00:02:15.425+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T00:02:15.494+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T00:02:16.046+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T00:02:16.815+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:02:16.815+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:02:17.893+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T00:02:18.033+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:02:18.128+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T00:02:19.275+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T00:02:19.285+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 8.001 seconds (process running for 9.192)
2025-01-10T00:02:19.290+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T00:02:19.307+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of afanaole
2025-01-10T00:02:19.428+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T00:02:19.474+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T00:02:19.479+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for afanaole
2025-01-10T00:02:19.481+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of allaebek
2025-01-10T00:02:19.522+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T00:02:19.524+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:02:19.524+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T00:02:19.525+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T00:02:19.525+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T00:02:19.525+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T00:02:19.525+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T00:02:19.526+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T00:02:19.526+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T00:02:19.526+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T00:02:19.526+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T00:02:19.526+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T00:02:19.526+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T00:02:19.527+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:02:19.527+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T00:02:19.527+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T00:02:19.527+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T00:02:19.527+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T00:02:19.528+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T00:02:19.529+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T00:02:19.530+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T00:02:19.530+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T00:02:19.530+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:02:19.530+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:02:19.530+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:02:19.530+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:02:19.531+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:02:19.532+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T00:02:19.535+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for allaebek
2025-01-10T00:02:19.538+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of alshadan
2025-01-10T00:02:19.571+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T00:02:19.576+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T00:02:19.581+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for alshadan
2025-01-10T00:02:19.582+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ambrojak
2025-01-10T00:02:19.629+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T00:02:19.634+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T00:02:19.641+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ambrojak
2025-01-10T00:02:19.643+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of banertam
2025-01-10T00:02:19.789+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T00:02:19.794+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T00:02:19.799+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for banertam
2025-01-10T00:02:19.801+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of bendasta
2025-01-10T00:02:19.810+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:19.811+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:19.811+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:19.834+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T00:02:19.838+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T00:02:19.847+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for bendasta
2025-01-10T00:02:19.848+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dedtoma1
2025-01-10T00:02:19.860+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T00:02:19.862+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T00:02:19.866+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dedtoma1
2025-01-10T00:02:19.868+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of durisja4
2025-01-10T00:02:19.884+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T00:02:19.885+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:19.885+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:19.886+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T00:02:19.890+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for durisja4
2025-01-10T00:02:19.892+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dvorak22
2025-01-10T00:02:19.919+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T00:02:19.921+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T00:02:19.925+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dvorak22
2025-01-10T00:02:19.927+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of foltyka1
2025-01-10T00:02:19.973+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T00:02:19.977+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T00:02:19.982+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for foltyka1
2025-01-10T00:02:19.983+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of gogatgio
2025-01-10T00:02:20.002+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T00:02:20.004+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T00:02:20.007+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for gogatgio
2025-01-10T00:02:20.009+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hamaljan
2025-01-10T00:02:20.062+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T00:02:20.068+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T00:02:20.073+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hamaljan
2025-01-10T00:02:20.076+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hannoemi
2025-01-10T00:02:20.128+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T00:02:20.128+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:02:20.129+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:02:20.129+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:02:20.130+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:02:20.131+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:02:20.131+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:02:20.131+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:02:20.131+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:02:20.132+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:02:20.133+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T00:02:20.137+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hannoemi
2025-01-10T00:02:20.139+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hasanmir
2025-01-10T00:02:20.167+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T00:02:20.170+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T00:02:20.174+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hasanmir
2025-01-10T00:02:20.175+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of herczmax
2025-01-10T00:02:20.178+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T00:02:20.181+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T00:02:20.185+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:02:20.187+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T00:02:20.189+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T00:02:20.191+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T00:02:20.194+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T00:02:20.196+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T00:02:20.198+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T00:02:20.200+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T00:02:20.205+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:02:20.211+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T00:02:20.213+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T00:02:20.216+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for herczmax
2025-01-10T00:02:20.218+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hliavhan
2025-01-10T00:02:20.246+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T00:02:20.248+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T00:02:20.251+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hliavhan
2025-01-10T00:02:20.253+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of holotdan
2025-01-10T00:02:20.270+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T00:02:20.272+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T00:02:20.276+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for holotdan
2025-01-10T00:02:20.278+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of horejvo1
2025-01-10T00:02:20.330+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T00:02:20.335+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T00:02:20.340+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for horejvo1
2025-01-10T00:02:20.342+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of houskond
2025-01-10T00:02:20.353+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.355+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.356+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.356+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.357+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.357+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.363+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:20.364+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T00:02:20.366+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T00:02:20.370+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for houskond
2025-01-10T00:02:20.374+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of iusupart
2025-01-10T00:02:20.397+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T00:02:20.398+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T00:02:20.402+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for iusupart
2025-01-10T00:02:20.404+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jafargur
2025-01-10T00:02:20.444+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T00:02:20.445+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:02:20.445+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:02:20.445+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:02:20.446+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:02:20.447+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:02:20.447+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.447+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.447+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.447+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.448+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:20.448+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:02:20.448+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:02:20.448+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T00:02:20.452+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jafargur
2025-01-10T00:02:20.454+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jagosmar
2025-01-10T00:02:20.468+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T00:02:20.469+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T00:02:20.473+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jagosmar
2025-01-10T00:02:20.475+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kankaluk
2025-01-10T00:02:20.483+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:20.483+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:20.484+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:20.507+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T00:02:20.509+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T00:02:20.513+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kankaluk
2025-01-10T00:02:20.520+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kaufmlu1
2025-01-10T00:02:20.544+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:02:20.691+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T00:02:20.693+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:20.693+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:20.698+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T00:02:20.706+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kaufmlu1
2025-01-10T00:02:20.707+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kolarj55
2025-01-10T00:02:20.721+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T00:02:20.722+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T00:02:20.725+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kolarj55
2025-01-10T00:02:20.727+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of krausj13
2025-01-10T00:02:20.759+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T00:02:20.763+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T00:02:20.766+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for krausj13
2025-01-10T00:02:20.768+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kulikvl1
2025-01-10T00:02:20.788+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T00:02:20.789+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T00:02:20.793+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kulikvl1
2025-01-10T00:02:20.795+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kundrdom
2025-01-10T00:02:20.823+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T00:02:20.825+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T00:02:20.829+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kundrdom
2025-01-10T00:02:20.831+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kunstja2
2025-01-10T00:02:20.839+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T00:02:20.854+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T00:02:20.856+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T00:02:20.859+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kunstja2
2025-01-10T00:02:20.866+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kvardro2
2025-01-10T00:02:20.887+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:02:20.999+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T00:02:21.001+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:21.001+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:21.004+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T00:02:21.013+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kvardro2
2025-01-10T00:02:21.015+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lemakter
2025-01-10T00:02:21.031+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T00:02:21.033+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T00:02:21.036+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lemakter
2025-01-10T00:02:21.038+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of liskaji8
2025-01-10T00:02:21.054+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T00:02:21.056+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T00:02:21.059+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for liskaji8
2025-01-10T00:02:21.061+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lokajva1
2025-01-10T00:02:21.064+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T00:02:21.074+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T00:02:21.076+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T00:02:21.080+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lokajva1
2025-01-10T00:02:21.082+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of losinmar
2025-01-10T00:02:21.100+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T00:02:21.102+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T00:02:21.106+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for losinmar
2025-01-10T00:02:21.108+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of majerto4
2025-01-10T00:02:21.108+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T00:02:21.120+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T00:02:21.122+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T00:02:21.125+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for majerto4
2025-01-10T00:02:21.127+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mezermat
2025-01-10T00:02:21.136+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T00:02:21.137+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T00:02:21.137+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T00:02:21.141+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mezermat
2025-01-10T00:02:21.143+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mickavo2
2025-01-10T00:02:21.193+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T00:02:21.198+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T00:02:21.202+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mickavo2
2025-01-10T00:02:21.204+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of moravp15
2025-01-10T00:02:21.231+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T00:02:21.232+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T00:02:21.232+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T00:02:21.232+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T00:02:21.232+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T00:02:21.233+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T00:02:21.234+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.235+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.236+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T00:02:21.239+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for moravp15
2025-01-10T00:02:21.241+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of neprater
2025-01-10T00:02:21.287+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T00:02:21.292+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T00:02:21.297+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for neprater
2025-01-10T00:02:21.298+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ovsyaver
2025-01-10T00:02:21.315+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T00:02:21.315+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:21.315+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:21.316+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T00:02:21.320+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ovsyaver
2025-01-10T00:02:21.321+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pejsomic
2025-01-10T00:02:21.328+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:02:21.329+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:02:21.341+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T00:02:21.341+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:02:21.341+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:02:21.341+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:02:21.341+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:02:21.341+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:02:21.341+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:02:21.342+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:02:21.342+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:02:21.342+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:02:21.342+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:02:21.342+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:02:21.342+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:02:21.343+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:02:21.343+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:02:21.343+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:02:21.343+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T00:02:21.346+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pejsomic
2025-01-10T00:02:21.348+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pelikon1
2025-01-10T00:02:21.361+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T00:02:21.362+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T00:02:21.364+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pelikon1
2025-01-10T00:02:21.366+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of perevyul
2025-01-10T00:02:21.405+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T00:02:21.406+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:02:21.406+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:02:21.406+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:02:21.406+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:02:21.406+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:02:21.407+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:02:21.408+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.408+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.408+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.408+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.408+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.408+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:02:21.409+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:02:21.409+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T00:02:21.414+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for perevyul
2025-01-10T00:02:21.416+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pichajak
2025-01-10T00:02:21.420+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:02:21.420+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:02:21.424+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T00:02:21.424+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T00:02:21.424+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T00:02:21.424+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T00:02:21.424+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T00:02:21.425+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T00:02:21.429+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pichajak
2025-01-10T00:02:21.430+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of popelrob
2025-01-10T00:02:21.460+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T00:02:21.463+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T00:02:21.468+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for popelrob
2025-01-10T00:02:21.470+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pucekrad
2025-01-10T00:02:21.507+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T00:02:21.510+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T00:02:21.515+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pucekrad
2025-01-10T00:02:21.517+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rakusdan
2025-01-10T00:02:21.541+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T00:02:21.541+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T00:02:21.541+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T00:02:21.541+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T00:02:21.542+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.543+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:02:21.543+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.543+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T00:02:21.543+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T00:02:21.543+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T00:02:21.547+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rakusdan
2025-01-10T00:02:21.549+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rodrixav
2025-01-10T00:02:21.566+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T00:02:21.567+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T00:02:21.579+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rodrixav
2025-01-10T00:02:21.581+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rudzeanh
2025-01-10T00:02:21.616+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T00:02:21.616+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T00:02:21.616+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T00:02:21.616+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:02:21.616+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:02:21.616+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T00:02:21.617+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T00:02:21.618+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.619+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T00:02:21.622+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rudzeanh
2025-01-10T00:02:21.624+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rystidia
2025-01-10T00:02:21.647+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T00:02:21.650+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T00:02:21.655+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rystidia
2025-01-10T00:02:21.657+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of shaninee
2025-01-10T00:02:21.679+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T00:02:21.680+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T00:02:21.686+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for shaninee
2025-01-10T00:02:21.687+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sobotvo2
2025-01-10T00:02:21.696+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:02:21.696+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:02:21.711+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T00:02:21.711+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:02:21.711+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:02:21.711+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:02:21.711+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:02:21.711+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:02:21.711+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:02:21.712+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:02:21.712+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:02:21.712+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:02:21.712+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:02:21.712+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:02:21.713+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:02:21.713+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:02:21.713+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:02:21.713+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:02:21.713+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T00:02:21.719+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sobotvo2
2025-01-10T00:02:21.720+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stepad10
2025-01-10T00:02:21.728+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T00:02:21.729+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T00:02:21.734+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stepad10
2025-01-10T00:02:21.736+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stulcrad
2025-01-10T00:02:21.763+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T00:02:21.764+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T00:02:21.770+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stulcrad
2025-01-10T00:02:21.771+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sukdojak
2025-01-10T00:02:21.772+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:02:21.773+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:02:21.778+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T00:02:21.785+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T00:02:21.785+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T00:02:21.786+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:02:21.786+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T00:02:21.786+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T00:02:21.786+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T00:02:21.790+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sukdojak
2025-01-10T00:02:21.791+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of susicpav
2025-01-10T00:02:21.804+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:21.805+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:02:21.807+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T00:02:21.808+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:21.808+01:00 ERROR 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:02:21.808+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T00:02:21.813+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for susicpav
2025-01-10T00:02:21.815+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of svobola7
2025-01-10T00:02:21.830+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T00:02:21.831+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T00:02:21.836+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for svobola7
2025-01-10T00:02:21.838+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of thakuvik
2025-01-10T00:02:21.889+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T00:02:21.893+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T00:02:21.899+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for thakuvik
2025-01-10T00:02:21.901+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tsayvyac
2025-01-10T00:02:21.943+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T00:02:21.946+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T00:02:21.952+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tsayvyac
2025-01-10T00:02:21.953+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tumaji10
2025-01-10T00:02:21.955+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:02:21.955+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T00:02:21.958+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.966+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T00:02:21.967+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T00:02:21.972+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tumaji10
2025-01-10T00:02:21.974+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tychtjan
2025-01-10T00:02:21.979+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.980+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.980+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.981+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.981+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.982+01:00  WARN 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:02:21.994+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T00:02:21.995+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T00:02:22.000+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tychtjan
2025-01-10T00:02:22.002+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ulcheyev
2025-01-10T00:02:22.044+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T00:02:22.046+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T00:02:22.050+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ulcheyev
2025-01-10T00:02:22.051+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of umlaspro
2025-01-10T00:02:22.062+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T00:02:22.063+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T00:02:22.067+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for umlaspro
2025-01-10T00:02:22.069+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of vonasmic
2025-01-10T00:02:22.085+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T00:02:22.086+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T00:02:22.091+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for vonasmic
2025-01-10T00:02:23.979+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:02:23.991+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T00:02:23.993+01:00  INFO 19888 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T00:20:19.767+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 16216 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T00:20:19.771+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T00:20:20.929+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T00:20:20.932+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T00:20:21.174+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 230 ms. Found 5 JPA repository interfaces.
2025-01-10T00:20:21.939+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T00:20:21.963+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T00:20:21.964+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T00:20:22.059+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T00:20:22.060+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2209 ms
2025-01-10T00:20:22.327+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T00:20:22.647+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:a2553bc4-52e8-4a33-bbce-28149f34f1f0 user=SA
2025-01-10T00:20:22.650+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T00:20:22.719+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T00:20:22.810+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T00:20:22.867+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T00:20:23.366+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T00:20:24.148+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:20:24.149+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:20:25.161+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T00:20:25.271+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:20:25.381+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T00:20:26.430+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T00:20:26.442+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 7.429 seconds (process running for 8.47)
2025-01-10T00:20:26.446+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T00:20:26.458+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of afanaole
2025-01-10T00:20:26.580+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T00:20:26.626+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T00:20:26.631+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for afanaole
2025-01-10T00:20:26.633+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of allaebek
2025-01-10T00:20:26.677+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T00:20:26.680+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:20:26.680+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T00:20:26.681+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T00:20:26.681+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T00:20:26.681+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T00:20:26.681+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T00:20:26.682+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T00:20:26.682+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T00:20:26.682+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T00:20:26.682+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T00:20:26.682+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T00:20:26.682+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T00:20:26.683+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T00:20:26.684+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T00:20:26.685+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T00:20:26.685+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T00:20:26.685+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T00:20:26.685+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T00:20:26.685+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T00:20:26.685+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:20:26.686+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:20:26.687+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:20:26.687+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:20:26.687+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:20:26.687+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:20:26.687+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T00:20:26.690+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for allaebek
2025-01-10T00:20:26.691+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of alshadan
2025-01-10T00:20:26.725+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T00:20:26.730+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T00:20:26.735+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for alshadan
2025-01-10T00:20:26.736+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ambrojak
2025-01-10T00:20:26.780+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T00:20:26.784+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T00:20:26.790+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ambrojak
2025-01-10T00:20:26.792+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of banertam
2025-01-10T00:20:26.924+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T00:20:26.930+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T00:20:26.934+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for banertam
2025-01-10T00:20:26.935+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of bendasta
2025-01-10T00:20:26.944+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:26.944+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:26.945+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:26.968+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T00:20:26.974+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T00:20:26.977+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for bendasta
2025-01-10T00:20:26.978+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dedtoma1
2025-01-10T00:20:26.995+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T00:20:26.997+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T00:20:27.000+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dedtoma1
2025-01-10T00:20:27.002+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of durisja4
2025-01-10T00:20:27.018+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T00:20:27.019+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:27.020+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:27.020+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T00:20:27.023+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for durisja4
2025-01-10T00:20:27.024+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dvorak22
2025-01-10T00:20:27.050+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T00:20:27.052+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T00:20:27.055+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dvorak22
2025-01-10T00:20:27.056+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of foltyka1
2025-01-10T00:20:27.099+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T00:20:27.103+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T00:20:27.107+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for foltyka1
2025-01-10T00:20:27.108+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of gogatgio
2025-01-10T00:20:27.126+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T00:20:27.128+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T00:20:27.131+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for gogatgio
2025-01-10T00:20:27.132+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hamaljan
2025-01-10T00:20:27.194+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T00:20:27.201+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T00:20:27.204+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hamaljan
2025-01-10T00:20:27.206+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hannoemi
2025-01-10T00:20:27.257+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T00:20:27.258+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:20:27.258+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:20:27.259+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:20:27.259+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:20:27.260+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:20:27.260+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:20:27.260+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:20:27.261+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:20:27.262+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.262+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.262+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.263+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.263+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.263+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:20:27.263+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:20:27.264+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T00:20:27.267+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hannoemi
2025-01-10T00:20:27.268+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hasanmir
2025-01-10T00:20:27.299+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T00:20:27.302+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T00:20:27.305+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hasanmir
2025-01-10T00:20:27.307+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of herczmax
2025-01-10T00:20:27.310+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T00:20:27.313+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T00:20:27.317+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:20:27.319+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T00:20:27.321+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T00:20:27.323+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T00:20:27.327+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T00:20:27.329+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T00:20:27.331+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T00:20:27.333+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T00:20:27.339+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:20:27.344+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T00:20:27.346+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T00:20:27.348+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for herczmax
2025-01-10T00:20:27.350+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hliavhan
2025-01-10T00:20:27.377+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T00:20:27.379+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T00:20:27.382+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hliavhan
2025-01-10T00:20:27.383+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of holotdan
2025-01-10T00:20:27.400+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T00:20:27.402+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T00:20:27.406+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for holotdan
2025-01-10T00:20:27.407+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of horejvo1
2025-01-10T00:20:27.463+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T00:20:27.468+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T00:20:27.472+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for horejvo1
2025-01-10T00:20:27.473+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of houskond
2025-01-10T00:20:27.484+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.485+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.486+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.486+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.487+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.487+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.488+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:27.489+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T00:20:27.490+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T00:20:27.492+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for houskond
2025-01-10T00:20:27.494+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of iusupart
2025-01-10T00:20:27.516+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T00:20:27.518+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T00:20:27.520+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for iusupart
2025-01-10T00:20:27.522+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jafargur
2025-01-10T00:20:27.562+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T00:20:27.563+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:20:27.563+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:20:27.564+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:20:27.565+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:20:27.565+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:20:27.565+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:20:27.565+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:20:27.565+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:20:27.566+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.566+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.566+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.566+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.567+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:27.567+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:20:27.567+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:20:27.567+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T00:20:27.571+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jafargur
2025-01-10T00:20:27.573+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jagosmar
2025-01-10T00:20:27.587+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T00:20:27.588+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T00:20:27.592+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jagosmar
2025-01-10T00:20:27.593+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kankaluk
2025-01-10T00:20:27.606+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:27.607+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:27.608+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:27.629+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T00:20:27.632+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T00:20:27.635+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kankaluk
2025-01-10T00:20:27.643+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kaufmlu1
2025-01-10T00:20:27.663+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:20:27.803+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T00:20:27.805+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:27.805+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:27.808+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T00:20:27.815+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kaufmlu1
2025-01-10T00:20:27.816+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kolarj55
2025-01-10T00:20:27.830+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T00:20:27.832+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T00:20:27.835+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kolarj55
2025-01-10T00:20:27.836+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of krausj13
2025-01-10T00:20:27.867+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T00:20:27.870+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T00:20:27.874+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for krausj13
2025-01-10T00:20:27.875+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kulikvl1
2025-01-10T00:20:27.889+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T00:20:27.891+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T00:20:27.894+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kulikvl1
2025-01-10T00:20:27.895+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kundrdom
2025-01-10T00:20:27.924+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T00:20:27.927+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T00:20:27.932+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kundrdom
2025-01-10T00:20:27.934+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kunstja2
2025-01-10T00:20:27.943+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T00:20:27.953+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T00:20:27.954+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T00:20:27.957+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kunstja2
2025-01-10T00:20:27.964+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kvardro2
2025-01-10T00:20:27.985+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:20:28.126+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T00:20:28.128+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:28.128+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:28.130+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T00:20:28.137+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kvardro2
2025-01-10T00:20:28.138+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lemakter
2025-01-10T00:20:28.157+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T00:20:28.159+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T00:20:28.162+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lemakter
2025-01-10T00:20:28.163+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of liskaji8
2025-01-10T00:20:28.179+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T00:20:28.180+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T00:20:28.183+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for liskaji8
2025-01-10T00:20:28.185+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lokajva1
2025-01-10T00:20:28.189+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T00:20:28.201+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T00:20:28.203+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T00:20:28.206+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lokajva1
2025-01-10T00:20:28.207+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of losinmar
2025-01-10T00:20:28.228+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T00:20:28.230+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T00:20:28.234+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for losinmar
2025-01-10T00:20:28.235+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of majerto4
2025-01-10T00:20:28.236+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T00:20:28.251+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T00:20:28.252+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T00:20:28.255+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for majerto4
2025-01-10T00:20:28.256+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mezermat
2025-01-10T00:20:28.265+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T00:20:28.266+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T00:20:28.266+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T00:20:28.269+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mezermat
2025-01-10T00:20:28.271+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mickavo2
2025-01-10T00:20:28.316+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T00:20:28.320+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T00:20:28.324+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mickavo2
2025-01-10T00:20:28.325+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of moravp15
2025-01-10T00:20:28.345+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T00:20:28.346+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.347+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.348+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T00:20:28.350+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for moravp15
2025-01-10T00:20:28.351+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of neprater
2025-01-10T00:20:28.427+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T00:20:28.433+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T00:20:28.439+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for neprater
2025-01-10T00:20:28.441+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ovsyaver
2025-01-10T00:20:28.468+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T00:20:28.469+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:28.470+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:28.471+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T00:20:28.476+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ovsyaver
2025-01-10T00:20:28.477+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pejsomic
2025-01-10T00:20:28.490+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:20:28.490+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:20:28.514+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T00:20:28.514+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:20:28.514+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:20:28.515+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:20:28.515+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:20:28.515+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:20:28.515+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:20:28.516+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:20:28.516+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:20:28.516+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:20:28.517+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:20:28.517+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:20:28.517+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:20:28.517+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:20:28.517+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:20:28.518+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:20:28.518+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T00:20:28.522+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pejsomic
2025-01-10T00:20:28.524+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pelikon1
2025-01-10T00:20:28.550+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T00:20:28.551+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T00:20:28.556+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pelikon1
2025-01-10T00:20:28.558+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of perevyul
2025-01-10T00:20:28.626+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T00:20:28.626+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:20:28.627+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:20:28.627+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:20:28.627+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:20:28.628+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:20:28.629+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:20:28.629+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:20:28.630+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:20:28.631+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T00:20:28.637+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for perevyul
2025-01-10T00:20:28.638+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pichajak
2025-01-10T00:20:28.643+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:20:28.644+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:20:28.648+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T00:20:28.648+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T00:20:28.648+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T00:20:28.648+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T00:20:28.648+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T00:20:28.649+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T00:20:28.652+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pichajak
2025-01-10T00:20:28.653+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of popelrob
2025-01-10T00:20:28.687+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T00:20:28.691+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T00:20:28.694+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for popelrob
2025-01-10T00:20:28.695+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pucekrad
2025-01-10T00:20:28.727+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T00:20:28.730+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T00:20:28.736+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pucekrad
2025-01-10T00:20:28.737+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rakusdan
2025-01-10T00:20:28.759+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T00:20:28.760+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T00:20:28.761+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T00:20:28.762+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T00:20:28.766+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rakusdan
2025-01-10T00:20:28.768+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rodrixav
2025-01-10T00:20:28.791+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T00:20:28.793+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T00:20:28.797+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rodrixav
2025-01-10T00:20:28.799+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rudzeanh
2025-01-10T00:20:28.836+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T00:20:28.836+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T00:20:28.836+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T00:20:28.836+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:20:28.837+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:20:28.837+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T00:20:28.837+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T00:20:28.837+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T00:20:28.837+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:20:28.838+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.839+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T00:20:28.840+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:20:28.840+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T00:20:28.840+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.840+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T00:20:28.844+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rudzeanh
2025-01-10T00:20:28.846+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rystidia
2025-01-10T00:20:28.866+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T00:20:28.874+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T00:20:28.878+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rystidia
2025-01-10T00:20:28.879+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of shaninee
2025-01-10T00:20:28.904+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T00:20:28.906+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T00:20:28.910+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for shaninee
2025-01-10T00:20:28.911+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sobotvo2
2025-01-10T00:20:28.918+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:20:28.919+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:20:28.931+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T00:20:28.931+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:20:28.931+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:20:28.931+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:20:28.931+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:20:28.931+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:20:28.931+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:20:28.932+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:20:28.932+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:20:28.932+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:20:28.932+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:20:28.932+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:20:28.932+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:20:28.933+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:20:28.933+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:20:28.933+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:20:28.933+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T00:20:28.937+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sobotvo2
2025-01-10T00:20:28.937+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stepad10
2025-01-10T00:20:28.945+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T00:20:28.946+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T00:20:28.949+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stepad10
2025-01-10T00:20:28.950+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stulcrad
2025-01-10T00:20:28.975+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T00:20:28.975+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T00:20:28.979+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stulcrad
2025-01-10T00:20:28.980+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sukdojak
2025-01-10T00:20:28.981+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:20:28.982+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:20:28.986+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T00:20:28.993+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T00:20:28.993+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:20:28.994+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T00:20:28.994+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T00:20:28.994+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T00:20:28.999+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sukdojak
2025-01-10T00:20:29.000+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of susicpav
2025-01-10T00:20:29.014+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:29.014+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:20:29.016+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T00:20:29.017+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:29.017+01:00 ERROR 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:20:29.018+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T00:20:29.021+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for susicpav
2025-01-10T00:20:29.022+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of svobola7
2025-01-10T00:20:29.037+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T00:20:29.039+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T00:20:29.044+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for svobola7
2025-01-10T00:20:29.045+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of thakuvik
2025-01-10T00:20:29.090+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T00:20:29.093+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T00:20:29.098+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for thakuvik
2025-01-10T00:20:29.099+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tsayvyac
2025-01-10T00:20:29.133+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T00:20:29.135+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T00:20:29.139+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tsayvyac
2025-01-10T00:20:29.140+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tumaji10
2025-01-10T00:20:29.141+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:20:29.142+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T00:20:29.145+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.153+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T00:20:29.153+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T00:20:29.156+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tumaji10
2025-01-10T00:20:29.157+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tychtjan
2025-01-10T00:20:29.162+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.162+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.163+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.164+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.164+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.165+01:00  WARN 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:20:29.177+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T00:20:29.183+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T00:20:29.187+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tychtjan
2025-01-10T00:20:29.188+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ulcheyev
2025-01-10T00:20:29.222+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T00:20:29.224+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T00:20:29.228+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ulcheyev
2025-01-10T00:20:29.229+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of umlaspro
2025-01-10T00:20:29.245+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T00:20:29.246+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T00:20:29.251+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for umlaspro
2025-01-10T00:20:29.252+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of vonasmic
2025-01-10T00:20:29.273+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T00:20:29.275+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T00:20:29.279+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for vonasmic
2025-01-10T00:20:30.370+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:20:30.382+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T00:20:30.384+01:00  INFO 16216 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T00:25:38.197+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 13668 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T00:25:38.201+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T00:25:39.237+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T00:25:39.239+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T00:25:39.481+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 231 ms. Found 5 JPA repository interfaces.
2025-01-10T00:25:40.204+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T00:25:40.224+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T00:25:40.225+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T00:25:40.312+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T00:25:40.313+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2042 ms
2025-01-10T00:25:40.566+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T00:25:40.871+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:5de77718-6852-4e9d-8dbe-c555c3288bab user=SA
2025-01-10T00:25:40.874+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T00:25:40.940+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T00:25:41.026+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T00:25:41.082+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T00:25:41.557+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T00:25:42.232+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:25:42.233+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:25:43.246+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T00:25:43.357+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:25:43.468+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T00:25:44.582+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T00:25:44.595+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 7.077 seconds (process running for 8.021)
2025-01-10T00:25:44.602+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T00:25:44.612+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of afanaole
2025-01-10T00:25:44.735+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T00:25:44.784+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T00:25:44.788+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for afanaole
2025-01-10T00:25:44.790+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of allaebek
2025-01-10T00:25:44.832+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T00:25:44.834+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:25:44.835+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T00:25:44.835+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T00:25:44.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T00:25:44.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T00:25:44.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T00:25:44.839+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T00:25:44.839+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T00:25:44.839+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T00:25:44.839+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T00:25:44.839+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T00:25:44.839+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T00:25:44.840+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T00:25:44.840+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T00:25:44.840+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T00:25:44.840+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:25:44.840+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:25:44.840+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:25:44.841+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:25:44.841+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:25:44.841+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:25:44.841+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:25:44.841+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:25:44.841+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:25:44.842+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:25:44.842+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:25:44.842+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:25:44.842+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T00:25:44.845+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for allaebek
2025-01-10T00:25:44.846+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of alshadan
2025-01-10T00:25:44.885+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T00:25:44.891+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T00:25:44.896+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for alshadan
2025-01-10T00:25:44.898+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ambrojak
2025-01-10T00:25:44.944+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T00:25:44.948+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T00:25:44.954+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ambrojak
2025-01-10T00:25:44.955+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of banertam
2025-01-10T00:25:45.102+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T00:25:45.108+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T00:25:45.112+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for banertam
2025-01-10T00:25:45.114+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of bendasta
2025-01-10T00:25:45.125+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:45.126+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:45.127+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:45.150+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T00:25:45.154+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T00:25:45.157+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for bendasta
2025-01-10T00:25:45.158+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dedtoma1
2025-01-10T00:25:45.176+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T00:25:45.177+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T00:25:45.180+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dedtoma1
2025-01-10T00:25:45.181+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of durisja4
2025-01-10T00:25:45.197+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T00:25:45.199+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:45.200+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:45.200+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T00:25:45.203+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for durisja4
2025-01-10T00:25:45.205+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dvorak22
2025-01-10T00:25:45.239+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T00:25:45.243+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T00:25:45.247+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dvorak22
2025-01-10T00:25:45.248+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of foltyka1
2025-01-10T00:25:45.293+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T00:25:45.297+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T00:25:45.303+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for foltyka1
2025-01-10T00:25:45.304+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of gogatgio
2025-01-10T00:25:45.323+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T00:25:45.324+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T00:25:45.326+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for gogatgio
2025-01-10T00:25:45.328+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hamaljan
2025-01-10T00:25:45.379+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T00:25:45.385+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T00:25:45.393+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hamaljan
2025-01-10T00:25:45.395+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hannoemi
2025-01-10T00:25:45.452+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T00:25:45.453+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:25:45.453+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:25:45.454+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:25:45.454+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:25:45.454+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:25:45.454+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:25:45.454+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:25:45.455+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:25:45.456+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:25:45.456+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:25:45.456+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.457+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.457+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.457+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.457+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.457+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:25:45.457+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:25:45.458+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T00:25:45.460+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hannoemi
2025-01-10T00:25:45.461+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hasanmir
2025-01-10T00:25:45.489+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T00:25:45.492+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T00:25:45.495+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hasanmir
2025-01-10T00:25:45.496+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of herczmax
2025-01-10T00:25:45.499+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T00:25:45.503+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T00:25:45.507+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:25:45.509+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T00:25:45.512+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T00:25:45.514+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T00:25:45.517+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T00:25:45.519+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T00:25:45.521+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T00:25:45.523+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T00:25:45.528+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:25:45.535+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T00:25:45.538+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T00:25:45.542+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for herczmax
2025-01-10T00:25:45.543+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hliavhan
2025-01-10T00:25:45.580+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T00:25:45.582+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T00:25:45.585+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hliavhan
2025-01-10T00:25:45.586+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of holotdan
2025-01-10T00:25:45.605+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T00:25:45.606+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T00:25:45.610+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for holotdan
2025-01-10T00:25:45.612+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of horejvo1
2025-01-10T00:25:45.676+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T00:25:45.680+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T00:25:45.683+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for horejvo1
2025-01-10T00:25:45.684+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of houskond
2025-01-10T00:25:45.695+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.696+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.696+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.697+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.697+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.698+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.699+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:45.699+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T00:25:45.701+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T00:25:45.703+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for houskond
2025-01-10T00:25:45.705+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of iusupart
2025-01-10T00:25:45.734+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T00:25:45.736+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T00:25:45.741+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for iusupart
2025-01-10T00:25:45.743+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jafargur
2025-01-10T00:25:45.795+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T00:25:45.796+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:25:45.796+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:25:45.797+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:25:45.798+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:25:45.799+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.799+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.800+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.800+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.800+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:45.800+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:25:45.800+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:25:45.801+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T00:25:45.806+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jafargur
2025-01-10T00:25:45.807+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jagosmar
2025-01-10T00:25:45.821+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T00:25:45.822+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T00:25:45.825+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jagosmar
2025-01-10T00:25:45.826+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kankaluk
2025-01-10T00:25:45.836+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:45.837+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:45.838+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:45.858+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T00:25:45.861+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T00:25:45.864+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kankaluk
2025-01-10T00:25:45.870+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kaufmlu1
2025-01-10T00:25:45.890+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:25:46.035+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T00:25:46.037+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:46.037+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:46.040+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T00:25:46.047+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kaufmlu1
2025-01-10T00:25:46.048+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kolarj55
2025-01-10T00:25:46.061+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T00:25:46.063+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T00:25:46.065+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kolarj55
2025-01-10T00:25:46.067+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of krausj13
2025-01-10T00:25:46.097+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T00:25:46.100+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T00:25:46.104+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for krausj13
2025-01-10T00:25:46.105+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kulikvl1
2025-01-10T00:25:46.121+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T00:25:46.123+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T00:25:46.126+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kulikvl1
2025-01-10T00:25:46.127+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kundrdom
2025-01-10T00:25:46.160+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T00:25:46.163+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T00:25:46.165+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kundrdom
2025-01-10T00:25:46.166+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kunstja2
2025-01-10T00:25:46.175+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T00:25:46.187+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T00:25:46.189+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T00:25:46.191+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kunstja2
2025-01-10T00:25:46.198+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kvardro2
2025-01-10T00:25:46.218+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:25:46.339+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T00:25:46.340+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:46.341+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:46.344+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T00:25:46.352+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kvardro2
2025-01-10T00:25:46.353+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lemakter
2025-01-10T00:25:46.370+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T00:25:46.372+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T00:25:46.375+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lemakter
2025-01-10T00:25:46.376+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of liskaji8
2025-01-10T00:25:46.392+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T00:25:46.394+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T00:25:46.398+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for liskaji8
2025-01-10T00:25:46.399+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lokajva1
2025-01-10T00:25:46.403+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T00:25:46.413+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T00:25:46.415+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T00:25:46.417+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lokajva1
2025-01-10T00:25:46.418+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of losinmar
2025-01-10T00:25:46.437+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T00:25:46.438+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T00:25:46.441+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for losinmar
2025-01-10T00:25:46.442+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of majerto4
2025-01-10T00:25:46.443+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T00:25:46.455+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T00:25:46.456+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T00:25:46.459+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for majerto4
2025-01-10T00:25:46.460+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mezermat
2025-01-10T00:25:46.469+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T00:25:46.470+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T00:25:46.470+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T00:25:46.472+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mezermat
2025-01-10T00:25:46.473+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mickavo2
2025-01-10T00:25:46.530+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T00:25:46.543+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T00:25:46.549+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mickavo2
2025-01-10T00:25:46.551+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of moravp15
2025-01-10T00:25:46.574+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:25:46.575+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T00:25:46.576+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T00:25:46.577+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T00:25:46.581+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for moravp15
2025-01-10T00:25:46.582+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of neprater
2025-01-10T00:25:46.631+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T00:25:46.637+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T00:25:46.641+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for neprater
2025-01-10T00:25:46.642+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ovsyaver
2025-01-10T00:25:46.661+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T00:25:46.661+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:46.661+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:46.662+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T00:25:46.665+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ovsyaver
2025-01-10T00:25:46.666+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pejsomic
2025-01-10T00:25:46.676+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:25:46.676+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:25:46.689+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T00:25:46.689+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:25:46.690+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:25:46.691+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T00:25:46.694+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pejsomic
2025-01-10T00:25:46.695+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pelikon1
2025-01-10T00:25:46.708+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T00:25:46.709+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T00:25:46.712+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pelikon1
2025-01-10T00:25:46.713+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of perevyul
2025-01-10T00:25:46.767+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T00:25:46.767+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:25:46.767+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:25:46.768+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:25:46.768+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:25:46.768+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:25:46.768+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:25:46.768+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:25:46.768+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:25:46.769+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:25:46.770+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.770+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.770+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.770+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.771+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.771+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:25:46.771+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:25:46.771+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T00:25:46.774+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for perevyul
2025-01-10T00:25:46.775+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pichajak
2025-01-10T00:25:46.780+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:25:46.780+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:25:46.784+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T00:25:46.784+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T00:25:46.784+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T00:25:46.784+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:25:46.785+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T00:25:46.786+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T00:25:46.788+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pichajak
2025-01-10T00:25:46.789+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of popelrob
2025-01-10T00:25:46.811+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T00:25:46.813+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T00:25:46.816+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for popelrob
2025-01-10T00:25:46.817+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pucekrad
2025-01-10T00:25:46.839+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T00:25:46.841+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T00:25:46.845+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pucekrad
2025-01-10T00:25:46.846+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rakusdan
2025-01-10T00:25:46.862+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T00:25:46.862+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T00:25:46.862+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T00:25:46.862+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T00:25:46.862+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T00:25:46.862+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T00:25:46.862+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T00:25:46.863+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T00:25:46.866+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rakusdan
2025-01-10T00:25:46.867+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rodrixav
2025-01-10T00:25:46.882+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T00:25:46.883+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T00:25:46.886+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rodrixav
2025-01-10T00:25:46.887+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rudzeanh
2025-01-10T00:25:46.914+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T00:25:46.915+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T00:25:46.916+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T00:25:46.917+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:25:46.917+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T00:25:46.917+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T00:25:46.917+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T00:25:46.920+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rudzeanh
2025-01-10T00:25:46.920+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rystidia
2025-01-10T00:25:46.939+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T00:25:46.940+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T00:25:46.944+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rystidia
2025-01-10T00:25:46.945+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of shaninee
2025-01-10T00:25:46.961+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T00:25:46.962+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T00:25:46.966+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for shaninee
2025-01-10T00:25:46.967+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sobotvo2
2025-01-10T00:25:46.978+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:25:46.978+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:25:46.992+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T00:25:46.992+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:25:46.992+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:25:46.992+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:25:46.992+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:25:46.992+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:25:46.992+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:25:46.993+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:25:46.994+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T00:25:46.998+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sobotvo2
2025-01-10T00:25:46.999+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stepad10
2025-01-10T00:25:47.006+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T00:25:47.008+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T00:25:47.011+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stepad10
2025-01-10T00:25:47.012+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stulcrad
2025-01-10T00:25:47.033+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T00:25:47.034+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T00:25:47.038+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stulcrad
2025-01-10T00:25:47.039+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sukdojak
2025-01-10T00:25:47.040+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:25:47.040+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:25:47.045+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T00:25:47.051+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T00:25:47.051+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:25:47.052+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T00:25:47.053+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T00:25:47.053+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T00:25:47.056+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sukdojak
2025-01-10T00:25:47.057+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of susicpav
2025-01-10T00:25:47.075+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:47.077+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:25:47.080+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T00:25:47.081+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:47.081+01:00 ERROR 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:25:47.082+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T00:25:47.087+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for susicpav
2025-01-10T00:25:47.088+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of svobola7
2025-01-10T00:25:47.105+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T00:25:47.107+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T00:25:47.111+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for svobola7
2025-01-10T00:25:47.112+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of thakuvik
2025-01-10T00:25:47.158+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T00:25:47.162+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T00:25:47.166+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for thakuvik
2025-01-10T00:25:47.167+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tsayvyac
2025-01-10T00:25:47.208+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T00:25:47.211+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T00:25:47.216+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tsayvyac
2025-01-10T00:25:47.217+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tumaji10
2025-01-10T00:25:47.219+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:25:47.220+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T00:25:47.224+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.237+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T00:25:47.238+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T00:25:47.243+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tumaji10
2025-01-10T00:25:47.244+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tychtjan
2025-01-10T00:25:47.250+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.251+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.251+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.252+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.253+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.254+01:00  WARN 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:25:47.267+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T00:25:47.269+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T00:25:47.273+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tychtjan
2025-01-10T00:25:47.274+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ulcheyev
2025-01-10T00:25:47.319+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T00:25:47.321+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T00:25:47.328+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ulcheyev
2025-01-10T00:25:47.329+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of umlaspro
2025-01-10T00:25:47.340+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T00:25:47.341+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T00:25:47.346+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for umlaspro
2025-01-10T00:25:47.347+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of vonasmic
2025-01-10T00:25:47.363+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T00:25:47.364+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T00:25:47.368+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for vonasmic
2025-01-10T00:25:48.888+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:25:48.901+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T00:25:48.903+01:00  INFO 13668 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T00:26:28.663+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 18120 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T00:26:28.665+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T00:26:29.715+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T00:26:29.718+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T00:26:29.970+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 242 ms. Found 5 JPA repository interfaces.
2025-01-10T00:26:30.686+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T00:26:30.707+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T00:26:30.707+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T00:26:30.805+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T00:26:30.805+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2077 ms
2025-01-10T00:26:31.052+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T00:26:31.360+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:ba425b7d-efa8-4db3-a073-39e55aca576d user=SA
2025-01-10T00:26:31.363+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T00:26:31.428+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T00:26:31.517+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T00:26:31.571+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T00:26:32.060+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T00:26:32.755+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:26:32.755+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T00:26:33.777+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T00:26:33.883+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:26:33.992+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T00:26:35.067+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T00:26:35.078+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 7.114 seconds (process running for 8.124)
2025-01-10T00:26:35.083+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T00:26:35.093+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of afanaole
2025-01-10T00:26:35.206+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T00:26:35.251+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T00:26:35.255+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for afanaole
2025-01-10T00:26:35.256+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of allaebek
2025-01-10T00:26:35.298+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T00:26:35.301+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:26:35.301+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T00:26:35.301+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T00:26:35.303+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T00:26:35.304+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T00:26:35.305+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T00:26:35.307+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T00:26:35.308+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:26:35.308+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T00:26:35.308+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T00:26:35.308+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T00:26:35.308+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T00:26:35.310+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for allaebek
2025-01-10T00:26:35.313+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of alshadan
2025-01-10T00:26:35.353+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T00:26:35.357+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T00:26:35.361+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for alshadan
2025-01-10T00:26:35.363+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ambrojak
2025-01-10T00:26:35.407+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T00:26:35.411+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T00:26:35.417+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ambrojak
2025-01-10T00:26:35.419+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of banertam
2025-01-10T00:26:35.544+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T00:26:35.550+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T00:26:35.554+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for banertam
2025-01-10T00:26:35.555+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of bendasta
2025-01-10T00:26:35.565+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:35.566+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:35.566+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:35.593+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T00:26:35.596+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T00:26:35.599+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for bendasta
2025-01-10T00:26:35.601+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dedtoma1
2025-01-10T00:26:35.615+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T00:26:35.616+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T00:26:35.619+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dedtoma1
2025-01-10T00:26:35.620+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of durisja4
2025-01-10T00:26:35.637+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T00:26:35.638+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:35.639+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:35.640+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T00:26:35.642+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for durisja4
2025-01-10T00:26:35.642+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of dvorak22
2025-01-10T00:26:35.664+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T00:26:35.668+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T00:26:35.670+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for dvorak22
2025-01-10T00:26:35.673+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of foltyka1
2025-01-10T00:26:35.725+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T00:26:35.728+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T00:26:35.731+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for foltyka1
2025-01-10T00:26:35.732+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of gogatgio
2025-01-10T00:26:35.750+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T00:26:35.752+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T00:26:35.754+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for gogatgio
2025-01-10T00:26:35.756+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hamaljan
2025-01-10T00:26:35.803+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T00:26:35.809+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T00:26:35.813+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hamaljan
2025-01-10T00:26:35.815+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hannoemi
2025-01-10T00:26:35.858+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T00:26:35.858+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:26:35.858+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:26:35.859+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:26:35.859+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:26:35.859+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:26:35.860+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:26:35.861+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:26:35.861+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:26:35.861+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:26:35.863+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T00:26:35.865+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hannoemi
2025-01-10T00:26:35.866+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hasanmir
2025-01-10T00:26:35.899+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T00:26:35.904+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T00:26:35.907+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hasanmir
2025-01-10T00:26:35.908+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of herczmax
2025-01-10T00:26:35.911+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T00:26:35.913+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T00:26:35.917+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:26:35.920+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T00:26:35.921+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T00:26:35.923+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T00:26:35.926+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T00:26:35.928+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T00:26:35.930+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T00:26:35.931+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T00:26:35.937+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T00:26:35.943+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T00:26:35.945+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T00:26:35.946+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for herczmax
2025-01-10T00:26:35.947+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of hliavhan
2025-01-10T00:26:35.974+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T00:26:35.975+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T00:26:35.978+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for hliavhan
2025-01-10T00:26:35.981+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of holotdan
2025-01-10T00:26:36.002+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T00:26:36.006+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T00:26:36.011+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for holotdan
2025-01-10T00:26:36.013+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of horejvo1
2025-01-10T00:26:36.077+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T00:26:36.082+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T00:26:36.090+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for horejvo1
2025-01-10T00:26:36.092+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of houskond
2025-01-10T00:26:36.112+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.113+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.114+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.115+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.116+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.117+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.118+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:36.119+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T00:26:36.121+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T00:26:36.125+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for houskond
2025-01-10T00:26:36.127+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of iusupart
2025-01-10T00:26:36.160+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T00:26:36.163+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T00:26:36.167+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for iusupart
2025-01-10T00:26:36.171+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jafargur
2025-01-10T00:26:36.220+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T00:26:36.220+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:26:36.220+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:26:36.221+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:26:36.221+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:26:36.221+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:26:36.221+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:26:36.221+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:26:36.222+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:26:36.223+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:26:36.224+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T00:26:36.227+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jafargur
2025-01-10T00:26:36.228+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of jagosmar
2025-01-10T00:26:36.242+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T00:26:36.243+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T00:26:36.246+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for jagosmar
2025-01-10T00:26:36.247+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kankaluk
2025-01-10T00:26:36.255+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:36.255+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:36.256+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:36.279+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T00:26:36.281+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T00:26:36.284+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kankaluk
2025-01-10T00:26:36.292+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kaufmlu1
2025-01-10T00:26:36.316+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:26:36.435+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T00:26:36.437+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:36.437+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:36.441+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T00:26:36.448+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kaufmlu1
2025-01-10T00:26:36.449+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kolarj55
2025-01-10T00:26:36.462+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T00:26:36.463+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T00:26:36.466+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kolarj55
2025-01-10T00:26:36.467+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of krausj13
2025-01-10T00:26:36.499+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T00:26:36.501+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T00:26:36.505+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for krausj13
2025-01-10T00:26:36.506+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kulikvl1
2025-01-10T00:26:36.524+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T00:26:36.525+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T00:26:36.528+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kulikvl1
2025-01-10T00:26:36.529+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kundrdom
2025-01-10T00:26:36.557+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T00:26:36.560+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T00:26:36.564+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kundrdom
2025-01-10T00:26:36.566+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kunstja2
2025-01-10T00:26:36.575+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T00:26:36.584+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T00:26:36.587+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T00:26:36.592+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kunstja2
2025-01-10T00:26:36.599+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of kvardro2
2025-01-10T00:26:36.632+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T00:26:36.987+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T00:26:36.989+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:36.989+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:36.992+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T00:26:37.001+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for kvardro2
2025-01-10T00:26:37.002+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lemakter
2025-01-10T00:26:37.053+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T00:26:37.054+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T00:26:37.057+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lemakter
2025-01-10T00:26:37.059+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of liskaji8
2025-01-10T00:26:37.077+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T00:26:37.082+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T00:26:37.084+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for liskaji8
2025-01-10T00:26:37.085+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of lokajva1
2025-01-10T00:26:37.089+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T00:26:37.099+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T00:26:37.101+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T00:26:37.104+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for lokajva1
2025-01-10T00:26:37.105+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of losinmar
2025-01-10T00:26:37.125+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T00:26:37.127+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T00:26:37.130+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for losinmar
2025-01-10T00:26:37.130+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of majerto4
2025-01-10T00:26:37.131+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T00:26:37.144+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T00:26:37.145+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T00:26:37.148+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for majerto4
2025-01-10T00:26:37.149+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mezermat
2025-01-10T00:26:37.158+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T00:26:37.158+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T00:26:37.159+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T00:26:37.161+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mezermat
2025-01-10T00:26:37.162+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of mickavo2
2025-01-10T00:26:37.211+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T00:26:37.216+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T00:26:37.219+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for mickavo2
2025-01-10T00:26:37.220+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of moravp15
2025-01-10T00:26:37.239+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T00:26:37.239+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.240+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T00:26:37.241+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.242+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T00:26:37.245+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for moravp15
2025-01-10T00:26:37.246+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of neprater
2025-01-10T00:26:37.292+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T00:26:37.296+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T00:26:37.300+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for neprater
2025-01-10T00:26:37.301+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ovsyaver
2025-01-10T00:26:37.318+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T00:26:37.319+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:37.319+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:37.320+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T00:26:37.322+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ovsyaver
2025-01-10T00:26:37.323+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pejsomic
2025-01-10T00:26:37.330+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:26:37.330+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:26:37.343+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T00:26:37.343+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:26:37.343+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:26:37.343+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:26:37.343+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:26:37.343+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:26:37.343+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:26:37.344+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:26:37.344+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:26:37.344+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:26:37.344+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:26:37.344+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:26:37.344+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:26:37.345+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:26:37.345+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:26:37.345+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:26:37.345+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T00:26:37.348+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pejsomic
2025-01-10T00:26:37.348+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pelikon1
2025-01-10T00:26:37.361+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T00:26:37.362+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T00:26:37.364+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pelikon1
2025-01-10T00:26:37.366+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of perevyul
2025-01-10T00:26:37.405+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T00:26:37.405+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T00:26:37.405+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T00:26:37.406+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T00:26:37.407+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T00:26:37.408+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T00:26:37.409+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T00:26:37.412+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for perevyul
2025-01-10T00:26:37.413+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pichajak
2025-01-10T00:26:37.417+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:26:37.417+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:26:37.421+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T00:26:37.421+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T00:26:37.422+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T00:26:37.423+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T00:26:37.425+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pichajak
2025-01-10T00:26:37.426+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of popelrob
2025-01-10T00:26:37.448+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T00:26:37.449+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T00:26:37.452+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for popelrob
2025-01-10T00:26:37.453+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of pucekrad
2025-01-10T00:26:37.475+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T00:26:37.477+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T00:26:37.481+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for pucekrad
2025-01-10T00:26:37.483+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rakusdan
2025-01-10T00:26:37.498+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.499+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T00:26:37.500+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.500+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T00:26:37.500+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T00:26:37.500+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T00:26:37.502+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rakusdan
2025-01-10T00:26:37.503+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rodrixav
2025-01-10T00:26:37.519+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T00:26:37.520+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T00:26:37.523+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rodrixav
2025-01-10T00:26:37.524+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rudzeanh
2025-01-10T00:26:37.546+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T00:26:37.547+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T00:26:37.547+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T00:26:37.547+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:26:37.547+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T00:26:37.547+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T00:26:37.548+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.549+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T00:26:37.552+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rudzeanh
2025-01-10T00:26:37.553+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of rystidia
2025-01-10T00:26:37.578+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T00:26:37.580+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T00:26:37.583+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for rystidia
2025-01-10T00:26:37.584+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of shaninee
2025-01-10T00:26:37.601+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T00:26:37.603+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T00:26:37.607+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for shaninee
2025-01-10T00:26:37.608+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sobotvo2
2025-01-10T00:26:37.616+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T00:26:37.616+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T00:26:37.628+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T00:26:37.628+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T00:26:37.629+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T00:26:37.630+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T00:26:37.634+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sobotvo2
2025-01-10T00:26:37.635+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stepad10
2025-01-10T00:26:37.642+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T00:26:37.643+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T00:26:37.648+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stepad10
2025-01-10T00:26:37.648+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of stulcrad
2025-01-10T00:26:37.669+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T00:26:37.670+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T00:26:37.675+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for stulcrad
2025-01-10T00:26:37.676+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of sukdojak
2025-01-10T00:26:37.677+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:26:37.677+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T00:26:37.682+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T00:26:37.688+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T00:26:37.689+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T00:26:37.690+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T00:26:37.690+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T00:26:37.690+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T00:26:37.693+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for sukdojak
2025-01-10T00:26:37.694+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of susicpav
2025-01-10T00:26:37.712+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:37.713+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T00:26:37.716+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T00:26:37.716+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:37.716+01:00 ERROR 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T00:26:37.717+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T00:26:37.720+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for susicpav
2025-01-10T00:26:37.721+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of svobola7
2025-01-10T00:26:37.736+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T00:26:37.738+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T00:26:37.741+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for svobola7
2025-01-10T00:26:37.743+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of thakuvik
2025-01-10T00:26:37.798+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T00:26:37.801+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T00:26:37.807+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for thakuvik
2025-01-10T00:26:37.808+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tsayvyac
2025-01-10T00:26:37.845+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T00:26:37.847+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T00:26:37.851+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tsayvyac
2025-01-10T00:26:37.852+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tumaji10
2025-01-10T00:26:37.853+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T00:26:37.854+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T00:26:37.857+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.865+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T00:26:37.865+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T00:26:37.868+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tumaji10
2025-01-10T00:26:37.869+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of tychtjan
2025-01-10T00:26:37.874+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.875+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.875+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.876+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.877+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.877+01:00  WARN 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T00:26:37.889+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T00:26:37.890+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T00:26:37.894+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for tychtjan
2025-01-10T00:26:37.895+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of ulcheyev
2025-01-10T00:26:37.930+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T00:26:37.932+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T00:26:37.937+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for ulcheyev
2025-01-10T00:26:37.939+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of umlaspro
2025-01-10T00:26:37.950+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T00:26:37.951+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T00:26:37.954+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for umlaspro
2025-01-10T00:26:37.955+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully read the script of vonasmic
2025-01-10T00:26:37.970+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T00:26:37.972+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T00:26:37.976+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [main] c.c.f.m.application.AssignmentEvaluator  : Successfully generated output for vonasmic
2025-01-10T00:26:38.966+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T00:26:38.978+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T00:26:38.980+01:00  INFO 18120 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T12:16:39.211+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 172 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T12:16:39.214+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T12:16:40.518+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T12:16:40.522+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T12:16:40.806+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 271 ms. Found 5 JPA repository interfaces.
2025-01-10T12:16:41.603+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T12:16:41.625+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T12:16:41.625+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T12:16:41.723+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T12:16:41.724+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2433 ms
2025-01-10T12:16:42.004+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T12:16:42.385+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:d4936cf2-3e8c-41eb-95f4-c8b9a03da93b user=SA
2025-01-10T12:16:42.387+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T12:16:42.461+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T12:16:42.582+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T12:16:42.654+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T12:16:43.219+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T12:16:43.985+01:00  WARN 172 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T12:16:43.986+01:00  WARN 172 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T12:16:45.111+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T12:16:45.242+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T12:16:45.333+01:00  WARN 172 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T12:16:46.581+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T12:16:46.592+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 8.17 seconds (process running for 10.741)
2025-01-10T12:16:46.598+01:00  INFO 172 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /scripts
2025-01-10T12:16:46.599+01:00 ERROR 172 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Path 'C:\scripts' is not a directory
2025-01-10T12:16:46.600+01:00 ERROR 172 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Evaluation failed: Path 'C:\scripts' is not a directory
2025-01-10T12:16:50.723+01:00  INFO 172 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T12:16:50.735+01:00  INFO 172 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T12:16:50.737+01:00  INFO 172 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T12:38:28.514+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 19452 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T12:38:28.517+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T12:38:29.698+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T12:38:29.702+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T12:38:29.949+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 235 ms. Found 5 JPA repository interfaces.
2025-01-10T12:38:30.752+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T12:38:30.773+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T12:38:30.774+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T12:38:30.866+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T12:38:30.867+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2281 ms
2025-01-10T12:38:31.132+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T12:38:31.469+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:d98d594f-5b8c-4f58-9878-af1a2a84a667 user=SA
2025-01-10T12:38:31.472+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T12:38:31.545+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T12:38:31.661+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T12:38:31.728+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T12:38:32.263+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T12:38:32.983+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T12:38:32.983+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T12:38:34.001+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T12:38:34.108+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T12:38:34.217+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T12:38:35.299+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T12:38:35.310+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 7.493 seconds (process running for 8.574)
2025-01-10T12:38:35.314+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T12:38:35.331+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T12:38:35.451+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T12:38:35.495+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T12:38:35.499+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T12:38:35.503+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T12:38:35.545+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T12:38:35.547+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T12:38:35.548+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T12:38:35.549+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T12:38:35.549+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T12:38:35.549+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T12:38:35.549+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T12:38:35.549+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T12:38:35.549+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T12:38:35.550+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T12:38:35.551+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T12:38:35.552+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T12:38:35.553+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T12:38:35.554+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T12:38:35.554+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T12:38:35.554+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T12:38:35.554+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T12:38:35.554+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T12:38:35.554+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T12:38:35.555+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T12:38:35.558+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T12:38:35.561+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T12:38:35.593+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T12:38:35.597+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T12:38:35.610+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T12:38:35.612+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T12:38:35.653+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T12:38:35.658+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T12:38:35.664+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T12:38:35.667+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T12:38:35.793+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T12:38:35.798+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T12:38:35.801+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T12:38:35.804+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T12:38:35.813+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:35.814+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:35.814+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:35.839+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T12:38:35.843+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T12:38:35.846+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T12:38:35.849+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T12:38:35.861+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T12:38:35.863+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T12:38:35.866+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T12:38:35.868+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T12:38:35.883+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T12:38:35.885+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:35.885+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:35.886+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T12:38:35.889+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T12:38:35.891+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T12:38:35.922+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T12:38:35.926+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T12:38:35.934+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T12:38:35.936+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T12:38:35.976+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T12:38:35.980+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T12:38:35.985+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T12:38:35.987+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T12:38:36.005+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T12:38:36.006+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T12:38:36.013+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T12:38:36.016+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T12:38:36.065+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T12:38:36.070+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T12:38:36.074+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T12:38:36.077+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T12:38:36.123+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T12:38:36.124+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T12:38:36.124+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T12:38:36.125+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T12:38:36.126+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T12:38:36.127+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T12:38:36.127+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T12:38:36.127+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T12:38:36.128+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T12:38:36.129+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T12:38:36.132+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T12:38:36.134+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T12:38:36.166+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T12:38:36.169+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T12:38:36.172+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T12:38:36.174+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T12:38:36.177+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T12:38:36.180+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T12:38:36.185+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T12:38:36.187+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T12:38:36.190+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T12:38:36.192+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T12:38:36.195+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T12:38:36.197+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T12:38:36.199+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T12:38:36.201+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T12:38:36.207+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T12:38:36.212+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T12:38:36.214+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T12:38:36.217+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T12:38:36.220+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T12:38:36.253+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T12:38:36.256+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T12:38:36.260+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T12:38:36.262+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T12:38:36.279+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T12:38:36.281+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T12:38:36.284+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T12:38:36.287+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T12:38:36.334+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T12:38:36.337+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T12:38:36.344+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T12:38:36.346+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T12:38:36.357+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.358+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.358+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.359+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.359+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.360+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.361+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:36.361+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T12:38:36.362+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T12:38:36.365+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T12:38:36.367+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T12:38:36.389+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T12:38:36.391+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T12:38:36.394+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T12:38:36.396+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T12:38:36.438+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T12:38:36.439+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T12:38:36.439+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T12:38:36.440+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T12:38:36.440+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T12:38:36.440+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T12:38:36.440+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T12:38:36.440+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T12:38:36.440+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T12:38:36.441+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T12:38:36.442+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.442+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.443+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.443+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.443+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:36.443+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T12:38:36.443+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T12:38:36.444+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T12:38:36.448+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T12:38:36.450+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T12:38:36.471+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T12:38:36.474+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T12:38:36.478+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T12:38:36.480+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T12:38:36.492+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:36.493+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:36.494+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:36.521+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T12:38:36.525+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T12:38:36.530+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T12:38:36.538+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T12:38:36.562+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T12:38:36.697+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T12:38:36.699+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:36.699+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:36.702+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T12:38:36.709+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T12:38:36.711+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T12:38:36.725+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T12:38:36.727+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T12:38:36.729+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T12:38:36.731+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T12:38:36.765+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T12:38:36.768+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T12:38:36.771+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T12:38:36.774+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T12:38:36.787+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T12:38:36.789+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T12:38:36.793+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T12:38:36.795+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T12:38:36.824+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T12:38:36.827+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T12:38:36.830+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T12:38:36.832+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T12:38:36.841+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T12:38:36.853+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T12:38:36.856+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T12:38:36.859+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T12:38:36.868+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T12:38:36.894+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T12:38:37.041+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T12:38:37.043+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:37.043+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:37.046+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T12:38:37.052+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T12:38:37.055+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T12:38:37.076+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T12:38:37.078+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T12:38:37.081+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T12:38:37.083+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T12:38:37.108+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T12:38:37.110+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T12:38:37.114+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T12:38:37.116+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T12:38:37.120+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T12:38:37.131+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T12:38:37.133+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T12:38:37.136+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T12:38:37.138+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T12:38:37.165+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T12:38:37.167+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T12:38:37.170+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T12:38:37.172+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T12:38:37.173+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T12:38:37.186+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T12:38:37.187+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T12:38:37.191+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T12:38:37.193+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T12:38:37.202+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T12:38:37.202+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T12:38:37.203+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T12:38:37.205+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T12:38:37.208+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T12:38:37.256+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T12:38:37.261+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T12:38:37.266+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T12:38:37.268+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T12:38:37.287+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T12:38:37.287+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T12:38:37.287+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.288+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.289+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.289+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T12:38:37.290+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.291+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T12:38:37.293+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T12:38:37.296+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T12:38:37.342+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T12:38:37.347+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T12:38:37.350+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T12:38:37.352+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T12:38:37.369+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T12:38:37.369+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:37.369+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:37.370+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T12:38:37.373+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T12:38:37.375+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T12:38:37.382+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T12:38:37.383+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T12:38:37.395+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T12:38:37.395+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T12:38:37.395+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T12:38:37.396+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T12:38:37.397+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T12:38:37.400+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T12:38:37.401+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T12:38:37.414+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T12:38:37.415+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T12:38:37.418+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T12:38:37.421+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T12:38:37.495+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T12:38:37.496+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T12:38:37.496+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T12:38:37.497+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T12:38:37.498+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T12:38:37.498+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T12:38:37.498+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T12:38:37.498+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T12:38:37.498+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T12:38:37.499+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.499+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.499+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.499+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.500+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.500+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T12:38:37.500+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T12:38:37.501+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T12:38:37.505+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T12:38:37.507+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T12:38:37.516+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T12:38:37.516+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T12:38:37.522+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T12:38:37.522+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T12:38:37.522+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T12:38:37.522+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T12:38:37.522+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T12:38:37.523+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T12:38:37.524+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T12:38:37.527+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T12:38:37.529+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T12:38:37.559+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T12:38:37.561+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T12:38:37.565+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T12:38:37.567+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T12:38:37.598+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T12:38:37.600+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T12:38:37.604+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T12:38:37.606+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T12:38:37.625+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T12:38:37.626+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.627+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T12:38:37.627+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.627+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T12:38:37.627+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T12:38:37.627+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T12:38:37.630+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T12:38:37.631+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T12:38:37.649+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T12:38:37.650+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T12:38:37.654+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T12:38:37.656+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T12:38:37.678+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T12:38:37.678+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T12:38:37.678+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T12:38:37.678+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T12:38:37.679+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.680+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T12:38:37.684+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T12:38:37.686+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T12:38:37.704+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T12:38:37.707+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T12:38:37.710+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T12:38:37.712+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T12:38:37.729+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T12:38:37.730+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T12:38:37.733+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T12:38:37.735+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T12:38:37.745+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T12:38:37.746+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T12:38:37.764+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T12:38:37.764+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T12:38:37.764+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T12:38:37.764+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T12:38:37.764+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T12:38:37.764+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T12:38:37.764+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T12:38:37.765+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T12:38:37.765+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T12:38:37.766+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T12:38:37.771+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T12:38:37.772+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T12:38:37.779+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T12:38:37.780+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T12:38:37.784+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T12:38:37.787+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T12:38:37.810+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T12:38:37.811+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T12:38:37.814+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T12:38:37.816+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T12:38:37.817+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T12:38:37.817+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T12:38:37.822+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T12:38:37.829+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T12:38:37.829+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T12:38:37.829+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T12:38:37.829+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T12:38:37.829+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T12:38:37.829+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T12:38:37.829+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T12:38:37.830+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T12:38:37.830+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T12:38:37.830+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T12:38:37.830+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T12:38:37.830+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T12:38:37.833+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T12:38:37.835+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T12:38:37.854+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:37.854+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T12:38:37.858+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T12:38:37.859+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:37.859+01:00 ERROR 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T12:38:37.860+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T12:38:37.865+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T12:38:37.867+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T12:38:37.882+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T12:38:37.883+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T12:38:37.886+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T12:38:37.889+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T12:38:37.935+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T12:38:37.938+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T12:38:37.943+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T12:38:37.945+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T12:38:37.978+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T12:38:37.980+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T12:38:37.984+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T12:38:37.986+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T12:38:37.987+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T12:38:37.988+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T12:38:37.992+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:37.999+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T12:38:38.000+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T12:38:38.003+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T12:38:38.006+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T12:38:38.012+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:38.012+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:38.013+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:38.014+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:38.014+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:38.015+01:00  WARN 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T12:38:38.028+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T12:38:38.029+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T12:38:38.033+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T12:38:38.035+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T12:38:38.071+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T12:38:38.073+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T12:38:38.078+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T12:38:38.079+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T12:38:38.090+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T12:38:38.091+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T12:38:38.095+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T12:38:38.097+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T12:38:38.112+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T12:38:38.113+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T12:38:38.117+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T12:38:39.946+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T12:38:39.958+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T12:38:39.960+01:00  INFO 19452 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T16:13:18.715+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 5448 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T16:13:18.718+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T16:13:19.860+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T16:13:19.864+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T16:13:20.123+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 246 ms. Found 5 JPA repository interfaces.
2025-01-10T16:13:20.943+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T16:13:20.966+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T16:13:20.966+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T16:13:21.070+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T16:13:21.071+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2289 ms
2025-01-10T16:13:21.331+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T16:13:21.693+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:788b20be-a282-4fbb-bcb7-507d56f41e44 user=SA
2025-01-10T16:13:21.696+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T16:13:21.769+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T16:13:21.885+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T16:13:21.955+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T16:13:22.503+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T16:13:23.254+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:13:23.254+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:13:24.352+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T16:13:24.485+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:13:24.585+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T16:13:25.708+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T16:13:25.720+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 7.796 seconds (process running for 9.044)
2025-01-10T16:13:25.726+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T16:13:25.736+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T16:13:25.864+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T16:13:25.912+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T16:13:25.917+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T16:13:25.919+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T16:13:25.962+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T16:13:25.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:13:25.965+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T16:13:25.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T16:13:25.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T16:13:25.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T16:13:25.967+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T16:13:25.967+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T16:13:25.967+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T16:13:25.968+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T16:13:25.968+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T16:13:25.968+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T16:13:25.968+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T16:13:25.968+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:13:25.968+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T16:13:25.969+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T16:13:25.969+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T16:13:25.969+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T16:13:25.969+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T16:13:25.969+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T16:13:25.969+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T16:13:25.970+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T16:13:25.972+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T16:13:25.972+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:13:25.972+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:13:25.972+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:13:25.973+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:13:25.973+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:13:25.973+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:13:25.973+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:13:25.973+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:13:25.973+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:13:25.974+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:13:25.974+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:13:25.974+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:13:25.974+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T16:13:25.978+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T16:13:25.980+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T16:13:26.014+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T16:13:26.018+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T16:13:26.024+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T16:13:26.026+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T16:13:26.082+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T16:13:26.086+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T16:13:26.092+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T16:13:26.094+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T16:13:26.232+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T16:13:26.237+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T16:13:26.243+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T16:13:26.245+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T16:13:26.253+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:26.254+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:26.261+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:26.284+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T16:13:26.288+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T16:13:26.293+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T16:13:26.295+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T16:13:26.311+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T16:13:26.314+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T16:13:26.318+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T16:13:26.320+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T16:13:26.344+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T16:13:26.346+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:26.346+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:26.347+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T16:13:26.350+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T16:13:26.352+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T16:13:26.378+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T16:13:26.381+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T16:13:26.384+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T16:13:26.386+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T16:13:26.429+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T16:13:26.441+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T16:13:26.448+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T16:13:26.450+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T16:13:26.483+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T16:13:26.486+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T16:13:26.490+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T16:13:26.492+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T16:13:26.563+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T16:13:26.573+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T16:13:26.577+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T16:13:26.581+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T16:13:26.636+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T16:13:26.637+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:13:26.637+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:13:26.638+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:13:26.639+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:13:26.639+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:13:26.640+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:13:26.641+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:13:26.643+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T16:13:26.646+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T16:13:26.648+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T16:13:26.676+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T16:13:26.679+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T16:13:26.683+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T16:13:26.685+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T16:13:26.688+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T16:13:26.692+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T16:13:26.696+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:13:26.699+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T16:13:26.702+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T16:13:26.704+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T16:13:26.708+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T16:13:26.710+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T16:13:26.711+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T16:13:26.713+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T16:13:26.721+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:13:26.730+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T16:13:26.732+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T16:13:26.735+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T16:13:26.737+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T16:13:26.767+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T16:13:26.769+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T16:13:26.772+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T16:13:26.775+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T16:13:26.792+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T16:13:26.795+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T16:13:26.797+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T16:13:26.800+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T16:13:26.840+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T16:13:26.844+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T16:13:26.848+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T16:13:26.848+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T16:13:26.859+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.861+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.861+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.861+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.861+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.862+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.863+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:26.865+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T16:13:26.866+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T16:13:26.869+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T16:13:26.871+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T16:13:26.894+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T16:13:26.895+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T16:13:26.898+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T16:13:26.901+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T16:13:26.953+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T16:13:26.953+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:13:26.953+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:13:26.954+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:13:26.955+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:13:26.956+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:13:26.957+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T16:13:26.960+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T16:13:26.961+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T16:13:26.975+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T16:13:26.976+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T16:13:26.979+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T16:13:26.981+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T16:13:26.989+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:26.989+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:26.989+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:27.009+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T16:13:27.011+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T16:13:27.014+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T16:13:27.022+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T16:13:27.042+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:13:27.179+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T16:13:27.181+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:27.181+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:27.184+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T16:13:27.190+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T16:13:27.191+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T16:13:27.206+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T16:13:27.207+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T16:13:27.210+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T16:13:27.212+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T16:13:27.241+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T16:13:27.243+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T16:13:27.246+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T16:13:27.248+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T16:13:27.261+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T16:13:27.263+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T16:13:27.266+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T16:13:27.272+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T16:13:27.301+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T16:13:27.304+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T16:13:27.309+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T16:13:27.311+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T16:13:27.318+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T16:13:27.336+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T16:13:27.342+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T16:13:27.347+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T16:13:27.357+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T16:13:27.395+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:13:27.550+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T16:13:27.552+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:27.552+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:27.555+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T16:13:27.561+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T16:13:27.562+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T16:13:27.580+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T16:13:27.582+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T16:13:27.586+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T16:13:27.587+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T16:13:27.605+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T16:13:27.606+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T16:13:27.610+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T16:13:27.612+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T16:13:27.617+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T16:13:27.628+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T16:13:27.630+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T16:13:27.633+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T16:13:27.634+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T16:13:27.653+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T16:13:27.656+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T16:13:27.660+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T16:13:27.661+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T16:13:27.662+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T16:13:27.675+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T16:13:27.675+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T16:13:27.679+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T16:13:27.680+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T16:13:27.690+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T16:13:27.691+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T16:13:27.691+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T16:13:27.694+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T16:13:27.695+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T16:13:27.740+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T16:13:27.744+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T16:13:27.748+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T16:13:27.749+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T16:13:27.767+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T16:13:27.767+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T16:13:27.768+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T16:13:27.769+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T16:13:27.770+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T16:13:27.770+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T16:13:27.773+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T16:13:27.775+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T16:13:27.841+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T16:13:27.846+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T16:13:27.850+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T16:13:27.852+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T16:13:27.871+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T16:13:27.872+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:27.872+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:27.873+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T16:13:27.876+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T16:13:27.877+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T16:13:27.884+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:13:27.885+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:13:27.896+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:13:27.898+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:13:27.899+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T16:13:27.902+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T16:13:27.903+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T16:13:27.917+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T16:13:27.918+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T16:13:27.920+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T16:13:27.922+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T16:13:27.961+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T16:13:27.961+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:13:27.963+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:13:27.964+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:13:27.965+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:13:27.966+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T16:13:27.971+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T16:13:27.973+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T16:13:27.978+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:13:27.978+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:13:27.981+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T16:13:27.981+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T16:13:27.981+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T16:13:27.981+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T16:13:27.981+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:13:27.981+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:13:27.983+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T16:13:27.984+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T16:13:27.985+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T16:13:27.987+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T16:13:28.009+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T16:13:28.012+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T16:13:28.014+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T16:13:28.017+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T16:13:28.040+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T16:13:28.041+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T16:13:28.045+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T16:13:28.046+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T16:13:28.061+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T16:13:28.061+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T16:13:28.061+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T16:13:28.061+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T16:13:28.061+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T16:13:28.063+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T16:13:28.065+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T16:13:28.066+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T16:13:28.083+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T16:13:28.084+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T16:13:28.087+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T16:13:28.089+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T16:13:28.113+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T16:13:28.113+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T16:13:28.113+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T16:13:28.113+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:13:28.113+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:13:28.113+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T16:13:28.114+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T16:13:28.115+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:13:28.116+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T16:13:28.116+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T16:13:28.116+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T16:13:28.124+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T16:13:28.126+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T16:13:28.145+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T16:13:28.147+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T16:13:28.149+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T16:13:28.152+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T16:13:28.168+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T16:13:28.170+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T16:13:28.173+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T16:13:28.175+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T16:13:28.181+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:13:28.182+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:13:28.194+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T16:13:28.194+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:13:28.194+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:13:28.194+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:13:28.194+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:13:28.195+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:13:28.197+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:13:28.197+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:13:28.197+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:13:28.197+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:13:28.197+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T16:13:28.200+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T16:13:28.202+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T16:13:28.208+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T16:13:28.210+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T16:13:28.213+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T16:13:28.216+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T16:13:28.235+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T16:13:28.236+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T16:13:28.241+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T16:13:28.242+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T16:13:28.243+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:13:28.243+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:13:28.247+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T16:13:28.254+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T16:13:28.254+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T16:13:28.254+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T16:13:28.254+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T16:13:28.256+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T16:13:28.256+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T16:13:28.256+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T16:13:28.256+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T16:13:28.256+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:13:28.256+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T16:13:28.257+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T16:13:28.257+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T16:13:28.260+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T16:13:28.261+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T16:13:28.274+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:28.275+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:13:28.276+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T16:13:28.278+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:28.278+01:00 ERROR 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:13:28.278+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T16:13:28.283+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T16:13:28.285+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T16:13:28.300+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T16:13:28.302+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T16:13:28.306+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T16:13:28.308+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T16:13:28.352+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T16:13:28.356+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T16:13:28.359+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T16:13:28.361+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T16:13:28.404+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T16:13:28.406+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T16:13:28.411+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T16:13:28.413+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T16:13:28.414+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:13:28.415+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T16:13:28.418+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.427+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T16:13:28.427+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T16:13:28.430+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T16:13:28.432+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T16:13:28.436+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.436+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.438+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.438+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.440+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.441+01:00  WARN 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:13:28.453+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T16:13:28.454+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T16:13:28.459+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T16:13:28.461+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T16:13:28.496+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T16:13:28.498+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T16:13:28.502+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T16:13:28.503+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T16:13:28.517+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T16:13:28.518+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T16:13:28.524+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T16:13:28.526+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T16:13:28.542+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T16:13:28.543+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T16:13:28.547+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T16:13:29.663+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:13:29.677+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T16:13:29.679+01:00  INFO 5448 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T16:15:08.310+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 11332 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T16:15:08.313+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T16:15:09.300+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T16:15:09.303+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T16:15:09.544+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 230 ms. Found 5 JPA repository interfaces.
2025-01-10T16:15:10.233+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T16:15:10.252+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T16:15:10.253+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T16:15:10.336+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T16:15:10.337+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1963 ms
2025-01-10T16:15:10.586+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T16:15:10.890+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:fe7410ff-3c8a-4e6c-ae67-0058bb27cf98 user=SA
2025-01-10T16:15:10.893+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T16:15:10.963+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T16:15:11.050+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T16:15:11.108+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T16:15:11.581+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T16:15:12.225+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:15:12.226+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:15:13.180+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T16:15:13.299+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:15:13.384+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T16:15:14.369+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T16:15:14.380+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 6.721 seconds (process running for 7.666)
2025-01-10T16:15:14.384+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T16:15:14.393+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T16:15:14.504+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T16:15:14.550+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T16:15:14.554+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T16:15:14.555+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T16:15:14.594+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T16:15:14.596+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:15:14.597+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T16:15:14.597+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T16:15:14.598+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T16:15:14.598+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T16:15:14.598+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T16:15:14.598+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T16:15:14.598+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T16:15:14.599+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T16:15:14.600+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T16:15:14.601+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T16:15:14.602+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T16:15:14.602+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T16:15:14.602+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T16:15:14.602+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T16:15:14.602+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:15:14.603+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:15:14.604+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:15:14.604+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:15:14.604+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:15:14.604+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T16:15:14.607+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T16:15:14.608+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T16:15:14.651+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T16:15:14.656+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T16:15:14.660+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T16:15:14.662+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T16:15:14.707+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T16:15:14.712+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T16:15:14.719+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T16:15:14.720+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T16:15:14.843+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T16:15:14.850+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T16:15:14.855+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T16:15:14.856+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T16:15:14.865+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:14.866+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:14.867+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:14.892+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T16:15:14.896+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T16:15:14.900+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T16:15:14.901+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T16:15:14.915+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T16:15:14.916+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T16:15:14.921+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T16:15:14.922+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T16:15:14.937+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T16:15:14.939+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:14.939+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:14.940+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T16:15:14.943+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T16:15:14.944+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T16:15:14.966+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T16:15:14.968+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T16:15:14.971+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T16:15:14.972+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T16:15:15.017+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T16:15:15.020+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T16:15:15.025+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T16:15:15.026+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T16:15:15.044+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T16:15:15.046+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T16:15:15.048+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T16:15:15.049+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T16:15:15.099+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T16:15:15.104+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T16:15:15.108+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T16:15:15.109+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T16:15:15.154+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T16:15:15.154+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:15:15.154+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:15:15.155+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:15:15.156+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:15:15.157+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:15:15.157+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:15:15.157+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:15:15.157+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:15:15.158+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.158+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.158+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.158+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.158+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.159+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:15:15.159+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:15:15.159+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T16:15:15.162+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T16:15:15.164+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T16:15:15.198+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T16:15:15.201+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T16:15:15.204+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T16:15:15.205+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T16:15:15.207+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T16:15:15.210+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T16:15:15.214+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:15:15.216+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T16:15:15.219+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T16:15:15.221+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T16:15:15.224+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T16:15:15.226+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T16:15:15.228+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T16:15:15.230+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T16:15:15.235+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:15:15.240+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T16:15:15.242+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T16:15:15.244+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T16:15:15.245+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T16:15:15.271+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T16:15:15.273+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T16:15:15.276+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T16:15:15.277+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T16:15:15.294+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T16:15:15.296+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T16:15:15.301+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T16:15:15.303+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T16:15:15.352+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T16:15:15.356+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T16:15:15.359+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T16:15:15.360+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T16:15:15.374+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.375+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.376+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.377+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.377+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.379+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.380+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:15.381+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T16:15:15.383+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T16:15:15.385+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T16:15:15.388+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T16:15:15.422+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T16:15:15.424+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T16:15:15.427+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T16:15:15.429+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T16:15:15.478+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T16:15:15.478+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:15:15.479+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:15:15.479+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:15:15.479+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:15:15.480+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:15:15.481+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.481+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.481+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.481+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.482+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:15.482+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:15:15.482+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:15:15.483+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T16:15:15.487+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T16:15:15.488+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T16:15:15.511+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T16:15:15.514+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T16:15:15.517+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T16:15:15.518+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T16:15:15.526+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:15.526+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:15.527+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:15.549+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T16:15:15.551+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T16:15:15.554+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T16:15:15.563+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T16:15:15.592+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:15:15.718+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T16:15:15.720+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:15.721+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:15.725+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T16:15:15.735+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T16:15:15.736+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T16:15:15.756+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T16:15:15.757+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T16:15:15.760+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T16:15:15.761+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T16:15:15.791+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T16:15:15.794+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T16:15:15.798+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T16:15:15.799+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T16:15:15.813+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T16:15:15.814+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T16:15:15.817+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T16:15:15.818+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T16:15:15.847+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T16:15:15.850+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T16:15:15.853+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T16:15:15.854+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T16:15:15.862+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T16:15:15.872+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T16:15:15.874+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T16:15:15.877+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T16:15:15.886+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T16:15:15.906+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:15:16.079+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T16:15:16.082+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:16.082+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:16.085+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T16:15:16.092+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T16:15:16.093+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T16:15:16.109+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T16:15:16.110+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T16:15:16.113+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T16:15:16.114+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T16:15:16.131+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T16:15:16.132+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T16:15:16.135+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T16:15:16.136+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T16:15:16.139+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T16:15:16.150+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T16:15:16.151+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T16:15:16.154+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T16:15:16.155+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T16:15:16.174+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T16:15:16.176+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T16:15:16.179+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T16:15:16.180+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T16:15:16.180+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T16:15:16.193+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T16:15:16.194+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T16:15:16.196+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T16:15:16.197+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T16:15:16.206+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T16:15:16.207+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T16:15:16.207+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T16:15:16.210+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T16:15:16.211+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T16:15:16.258+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T16:15:16.264+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T16:15:16.268+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T16:15:16.269+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T16:15:16.291+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.292+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T16:15:16.293+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T16:15:16.294+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.295+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.295+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T16:15:16.297+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T16:15:16.299+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T16:15:16.345+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T16:15:16.351+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T16:15:16.360+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T16:15:16.361+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T16:15:16.378+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T16:15:16.379+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:16.379+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:16.381+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T16:15:16.384+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T16:15:16.385+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T16:15:16.393+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:15:16.393+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:15:16.405+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T16:15:16.406+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:15:16.406+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:15:16.406+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:15:16.406+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:15:16.406+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:15:16.406+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:15:16.407+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:15:16.408+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T16:15:16.410+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T16:15:16.411+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T16:15:16.424+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T16:15:16.425+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T16:15:16.428+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T16:15:16.429+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T16:15:16.469+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T16:15:16.470+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:15:16.470+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:15:16.470+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:15:16.470+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:15:16.470+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:15:16.471+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:15:16.472+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:15:16.473+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T16:15:16.476+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T16:15:16.477+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T16:15:16.481+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:15:16.482+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:15:16.486+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T16:15:16.486+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T16:15:16.487+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T16:15:16.489+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T16:15:16.490+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T16:15:16.512+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T16:15:16.514+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T16:15:16.517+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T16:15:16.518+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T16:15:16.539+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T16:15:16.541+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T16:15:16.544+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T16:15:16.545+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T16:15:16.560+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T16:15:16.560+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T16:15:16.561+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.562+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:15:16.562+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.562+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T16:15:16.562+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T16:15:16.562+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T16:15:16.565+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T16:15:16.566+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T16:15:16.580+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T16:15:16.582+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T16:15:16.585+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T16:15:16.586+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T16:15:16.607+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T16:15:16.607+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:15:16.608+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T16:15:16.609+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.610+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T16:15:16.612+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T16:15:16.613+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T16:15:16.632+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T16:15:16.634+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T16:15:16.637+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T16:15:16.638+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T16:15:16.654+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T16:15:16.656+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T16:15:16.659+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T16:15:16.660+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T16:15:16.671+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:15:16.672+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:15:16.684+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T16:15:16.684+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:15:16.684+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:15:16.684+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:15:16.684+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:15:16.684+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:15:16.684+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:15:16.685+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:15:16.686+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:15:16.686+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T16:15:16.689+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T16:15:16.689+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T16:15:16.697+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T16:15:16.697+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T16:15:16.700+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T16:15:16.701+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T16:15:16.722+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T16:15:16.723+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T16:15:16.726+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T16:15:16.727+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T16:15:16.728+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:15:16.728+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:15:16.732+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T16:15:16.739+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T16:15:16.739+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T16:15:16.739+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T16:15:16.739+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T16:15:16.739+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T16:15:16.739+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T16:15:16.739+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T16:15:16.740+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T16:15:16.740+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:15:16.740+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T16:15:16.740+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T16:15:16.740+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T16:15:16.743+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T16:15:16.744+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T16:15:16.757+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:16.757+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:15:16.759+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T16:15:16.760+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:16.760+01:00 ERROR 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:15:16.761+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T16:15:16.766+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T16:15:16.768+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T16:15:16.789+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T16:15:16.790+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T16:15:16.793+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T16:15:16.795+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T16:15:16.840+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T16:15:16.843+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T16:15:16.848+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T16:15:16.849+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T16:15:16.883+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T16:15:16.885+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T16:15:16.889+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T16:15:16.890+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T16:15:16.891+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:15:16.892+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T16:15:16.895+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.903+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T16:15:16.903+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T16:15:16.906+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T16:15:16.907+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T16:15:16.912+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.912+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.913+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.914+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.914+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.915+01:00  WARN 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:15:16.926+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T16:15:16.928+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T16:15:16.931+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T16:15:16.932+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T16:15:16.971+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T16:15:16.973+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T16:15:16.977+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T16:15:16.978+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T16:15:16.993+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T16:15:16.994+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T16:15:16.998+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T16:15:16.999+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T16:15:17.014+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T16:15:17.015+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T16:15:17.019+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T16:15:18.832+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:15:18.846+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T16:15:18.848+01:00  INFO 11332 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T16:18:25.972+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 19548 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T16:18:25.975+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T16:18:26.993+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T16:18:26.996+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T16:18:27.225+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 219 ms. Found 5 JPA repository interfaces.
2025-01-10T16:18:27.920+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T16:18:27.939+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T16:18:27.939+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T16:18:28.023+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T16:18:28.023+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1986 ms
2025-01-10T16:18:28.262+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T16:18:28.552+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:b541be4f-ae7a-4a06-b3aa-0e763373a1a2 user=SA
2025-01-10T16:18:28.555+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T16:18:28.617+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T16:18:28.702+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T16:18:28.754+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T16:18:29.211+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T16:18:29.911+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:18:29.912+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:18:31.034+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T16:18:31.154+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:18:31.265+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T16:18:32.404+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T16:18:32.414+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 7.147 seconds (process running for 8.084)
2025-01-10T16:18:32.419+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T16:18:32.428+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T16:18:32.546+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T16:18:32.596+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T16:18:32.601+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T16:18:32.602+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T16:18:32.643+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T16:18:32.644+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:18:32.645+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T16:18:32.645+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T16:18:32.646+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T16:18:32.646+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T16:18:32.646+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T16:18:32.646+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T16:18:32.646+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T16:18:32.646+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T16:18:32.647+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T16:18:32.648+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T16:18:32.649+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T16:18:32.650+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T16:18:32.650+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T16:18:32.650+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:18:32.650+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:18:32.650+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:18:32.650+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:18:32.651+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:18:32.652+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T16:18:32.655+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T16:18:32.656+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T16:18:32.687+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T16:18:32.692+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T16:18:32.706+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T16:18:32.707+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T16:18:32.764+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T16:18:32.770+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T16:18:32.777+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T16:18:32.778+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T16:18:32.902+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T16:18:32.908+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T16:18:32.911+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T16:18:32.913+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T16:18:32.922+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:32.923+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:32.924+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:32.950+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T16:18:32.953+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T16:18:32.957+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T16:18:32.958+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T16:18:32.971+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T16:18:32.973+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T16:18:32.977+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T16:18:32.978+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T16:18:32.995+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T16:18:32.997+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:32.997+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:32.998+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T16:18:33.000+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T16:18:33.001+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T16:18:33.023+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T16:18:33.025+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T16:18:33.028+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T16:18:33.029+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T16:18:33.073+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T16:18:33.076+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T16:18:33.082+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T16:18:33.083+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T16:18:33.101+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T16:18:33.102+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T16:18:33.105+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T16:18:33.106+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T16:18:33.165+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T16:18:33.171+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T16:18:33.175+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T16:18:33.176+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T16:18:33.231+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T16:18:33.232+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:18:33.232+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:18:33.233+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:18:33.234+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:18:33.234+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:18:33.234+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:18:33.234+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:18:33.235+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:18:33.235+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:18:33.235+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:18:33.235+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:18:33.235+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:18:33.235+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:18:33.236+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:18:33.236+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:18:33.236+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:18:33.238+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.239+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.239+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.240+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.240+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.240+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:18:33.240+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:18:33.241+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T16:18:33.244+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T16:18:33.245+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T16:18:33.293+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T16:18:33.296+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T16:18:33.300+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T16:18:33.302+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T16:18:33.309+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T16:18:33.315+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T16:18:33.325+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:18:33.329+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T16:18:33.332+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T16:18:33.334+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T16:18:33.339+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T16:18:33.341+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T16:18:33.343+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T16:18:33.347+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T16:18:33.358+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:18:33.364+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T16:18:33.366+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T16:18:33.369+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T16:18:33.371+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T16:18:33.414+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T16:18:33.417+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T16:18:33.420+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T16:18:33.422+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T16:18:33.441+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T16:18:33.444+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T16:18:33.449+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T16:18:33.452+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T16:18:33.494+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T16:18:33.497+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T16:18:33.501+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T16:18:33.501+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T16:18:33.517+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.518+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.519+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.520+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.521+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.522+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.522+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:33.523+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T16:18:33.525+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T16:18:33.528+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T16:18:33.529+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T16:18:33.562+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T16:18:33.564+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T16:18:33.568+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T16:18:33.569+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T16:18:33.616+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T16:18:33.616+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:18:33.616+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:18:33.617+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:18:33.618+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:18:33.618+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:18:33.618+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:18:33.618+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:18:33.618+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:18:33.618+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:18:33.619+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.619+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.619+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.619+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.619+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:33.620+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:18:33.620+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:18:33.620+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T16:18:33.624+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T16:18:33.625+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T16:18:33.639+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T16:18:33.641+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T16:18:33.644+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T16:18:33.644+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T16:18:33.652+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:33.652+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:33.653+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:33.676+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T16:18:33.680+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T16:18:33.684+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T16:18:33.693+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T16:18:33.715+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:18:33.840+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T16:18:33.841+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:33.841+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:33.844+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T16:18:33.851+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T16:18:33.852+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T16:18:33.865+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T16:18:33.867+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T16:18:33.869+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T16:18:33.870+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T16:18:33.902+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T16:18:33.904+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T16:18:33.908+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T16:18:33.909+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T16:18:33.925+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T16:18:33.926+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T16:18:33.930+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T16:18:33.931+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T16:18:33.968+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T16:18:33.971+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T16:18:33.974+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T16:18:33.975+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T16:18:33.983+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T16:18:33.994+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T16:18:33.996+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T16:18:33.999+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T16:18:34.007+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T16:18:34.042+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:18:34.237+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T16:18:34.240+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:34.240+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:34.243+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T16:18:34.252+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T16:18:34.254+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T16:18:34.277+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T16:18:34.279+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T16:18:34.282+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T16:18:34.283+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T16:18:34.302+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T16:18:34.304+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T16:18:34.308+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T16:18:34.309+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T16:18:34.313+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T16:18:34.324+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T16:18:34.325+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T16:18:34.328+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T16:18:34.329+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T16:18:34.350+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T16:18:34.352+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T16:18:34.355+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T16:18:34.356+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T16:18:34.356+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T16:18:34.373+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T16:18:34.374+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T16:18:34.377+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T16:18:34.378+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T16:18:34.390+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T16:18:34.390+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T16:18:34.391+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T16:18:34.393+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T16:18:34.394+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T16:18:34.437+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T16:18:34.442+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T16:18:34.445+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T16:18:34.446+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T16:18:34.463+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.464+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T16:18:34.465+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T16:18:34.466+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.466+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.466+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T16:18:34.468+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T16:18:34.469+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T16:18:34.512+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T16:18:34.517+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T16:18:34.520+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T16:18:34.521+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T16:18:34.538+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T16:18:34.539+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:34.539+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:34.540+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T16:18:34.542+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T16:18:34.543+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T16:18:34.550+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:18:34.550+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:18:34.562+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T16:18:34.563+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:18:34.563+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:18:34.563+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:18:34.563+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:18:34.563+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:18:34.563+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:18:34.564+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:18:34.565+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T16:18:34.567+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T16:18:34.568+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T16:18:34.580+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T16:18:34.582+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T16:18:34.584+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T16:18:34.585+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T16:18:34.624+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T16:18:34.624+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:18:34.624+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:18:34.625+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:18:34.626+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:18:34.627+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T16:18:34.630+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T16:18:34.631+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T16:18:34.635+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:18:34.635+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:18:34.639+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T16:18:34.639+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T16:18:34.639+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T16:18:34.639+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T16:18:34.639+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:18:34.639+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T16:18:34.639+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T16:18:34.640+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T16:18:34.643+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T16:18:34.643+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T16:18:34.665+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T16:18:34.666+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T16:18:34.669+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T16:18:34.670+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T16:18:34.691+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T16:18:34.693+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T16:18:34.696+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T16:18:34.697+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T16:18:34.713+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T16:18:34.713+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T16:18:34.714+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T16:18:34.716+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T16:18:34.717+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T16:18:34.732+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T16:18:34.733+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T16:18:34.736+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T16:18:34.737+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T16:18:34.758+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T16:18:34.758+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T16:18:34.759+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:18:34.760+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.761+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T16:18:34.771+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T16:18:34.772+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T16:18:34.790+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T16:18:34.792+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T16:18:34.795+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T16:18:34.796+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T16:18:34.812+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T16:18:34.814+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T16:18:34.817+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T16:18:34.818+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T16:18:34.825+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:18:34.825+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:18:34.837+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T16:18:34.837+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:18:34.837+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:18:34.837+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:18:34.837+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:18:34.837+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:18:34.837+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:18:34.838+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:18:34.838+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:18:34.838+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:18:34.838+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:18:34.838+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:18:34.839+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:18:34.839+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:18:34.839+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:18:34.839+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:18:34.839+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T16:18:34.843+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T16:18:34.843+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T16:18:34.850+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T16:18:34.851+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T16:18:34.854+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T16:18:34.855+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T16:18:34.875+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T16:18:34.876+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T16:18:34.879+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T16:18:34.880+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T16:18:34.881+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:18:34.881+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:18:34.886+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T16:18:34.893+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T16:18:34.893+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T16:18:34.894+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:18:34.894+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T16:18:34.894+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T16:18:34.894+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T16:18:34.897+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T16:18:34.898+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T16:18:34.913+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:34.914+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:18:34.916+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T16:18:34.916+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:34.917+01:00 ERROR 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:18:34.917+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T16:18:34.921+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T16:18:34.922+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T16:18:34.937+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T16:18:34.939+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T16:18:34.942+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T16:18:34.943+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T16:18:34.987+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T16:18:34.991+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T16:18:34.995+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T16:18:34.996+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T16:18:35.029+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T16:18:35.031+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T16:18:35.035+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T16:18:35.035+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T16:18:35.037+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:18:35.038+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T16:18:35.041+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.049+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T16:18:35.049+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T16:18:35.052+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T16:18:35.053+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T16:18:35.058+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.059+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.059+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.060+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.061+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.061+01:00  WARN 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:18:35.073+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T16:18:35.075+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T16:18:35.078+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T16:18:35.079+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T16:18:35.114+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T16:18:35.116+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T16:18:35.120+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T16:18:35.121+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T16:18:35.131+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T16:18:35.132+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T16:18:35.135+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T16:18:35.136+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T16:18:35.152+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T16:18:35.153+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T16:18:35.157+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T16:18:37.102+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:18:37.114+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T16:18:37.116+01:00  INFO 19548 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T16:20:27.097+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 11408 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T16:20:27.102+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T16:20:28.125+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T16:20:28.127+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T16:20:28.364+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 226 ms. Found 5 JPA repository interfaces.
2025-01-10T16:20:29.074+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T16:20:29.094+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T16:20:29.094+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T16:20:29.180+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T16:20:29.181+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2008 ms
2025-01-10T16:20:29.442+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T16:20:29.763+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:3a830fb3-df45-4ef9-9713-61d63ab1e999 user=SA
2025-01-10T16:20:29.765+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T16:20:29.830+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T16:20:29.915+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T16:20:29.967+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T16:20:30.442+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T16:20:31.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:20:31.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:20:32.069+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T16:20:32.185+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:20:32.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T16:20:33.322+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T16:20:33.333+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 6.932 seconds (process running for 7.972)
2025-01-10T16:20:33.337+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T16:20:33.346+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T16:20:33.455+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T16:20:33.497+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T16:20:33.501+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T16:20:33.503+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T16:20:33.542+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T16:20:33.543+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:20:33.544+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T16:20:33.544+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T16:20:33.545+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T16:20:33.545+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T16:20:33.545+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T16:20:33.545+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T16:20:33.545+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T16:20:33.545+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T16:20:33.546+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T16:20:33.546+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T16:20:33.546+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T16:20:33.546+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:20:33.546+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T16:20:33.546+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T16:20:33.547+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T16:20:33.548+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T16:20:33.549+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T16:20:33.549+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T16:20:33.549+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T16:20:33.549+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:20:33.549+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:20:33.549+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:20:33.550+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:20:33.550+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:20:33.550+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:20:33.550+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:20:33.550+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:20:33.550+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:20:33.551+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:20:33.551+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:20:33.551+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:20:33.551+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T16:20:33.554+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T16:20:33.555+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T16:20:33.593+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T16:20:33.598+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T16:20:33.603+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T16:20:33.604+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T16:20:33.648+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T16:20:33.652+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T16:20:33.668+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T16:20:33.669+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T16:20:33.784+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T16:20:33.789+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T16:20:33.793+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T16:20:33.794+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T16:20:33.803+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:33.804+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:33.804+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:33.827+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T16:20:33.836+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T16:20:33.839+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T16:20:33.839+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T16:20:33.852+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T16:20:33.853+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T16:20:33.858+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T16:20:33.859+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T16:20:33.876+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T16:20:33.877+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:33.877+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:33.878+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T16:20:33.882+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T16:20:33.883+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T16:20:33.908+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T16:20:33.911+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T16:20:33.913+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T16:20:33.915+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T16:20:33.957+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T16:20:33.961+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T16:20:33.967+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T16:20:33.968+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T16:20:33.986+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T16:20:33.987+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T16:20:33.989+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T16:20:33.990+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T16:20:34.039+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T16:20:34.050+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T16:20:34.054+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T16:20:34.055+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T16:20:34.100+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T16:20:34.100+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:20:34.101+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:20:34.101+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:20:34.102+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:20:34.102+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:20:34.102+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:20:34.103+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:20:34.103+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:20:34.103+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:20:34.103+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:20:34.103+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:20:34.104+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:20:34.104+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:20:34.104+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:20:34.104+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:20:34.104+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:20:34.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.105+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:20:34.106+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:20:34.106+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T16:20:34.109+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T16:20:34.110+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T16:20:34.138+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T16:20:34.141+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T16:20:34.144+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T16:20:34.145+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T16:20:34.148+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T16:20:34.151+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T16:20:34.155+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:20:34.157+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T16:20:34.160+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T16:20:34.162+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T16:20:34.166+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T16:20:34.167+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T16:20:34.169+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T16:20:34.171+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T16:20:34.176+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:20:34.181+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T16:20:34.182+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T16:20:34.185+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T16:20:34.186+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T16:20:34.212+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T16:20:34.213+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T16:20:34.217+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T16:20:34.218+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T16:20:34.241+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T16:20:34.244+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T16:20:34.249+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T16:20:34.251+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T16:20:34.301+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T16:20:34.305+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T16:20:34.309+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T16:20:34.310+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T16:20:34.321+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.322+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.323+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.323+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.324+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.324+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.325+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:34.325+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T16:20:34.326+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T16:20:34.329+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T16:20:34.330+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T16:20:34.352+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T16:20:34.354+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T16:20:34.357+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T16:20:34.358+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T16:20:34.397+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T16:20:34.398+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:20:34.398+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:20:34.399+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:20:34.400+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:20:34.400+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:20:34.400+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:20:34.400+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.400+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.401+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.401+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.401+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:34.401+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:20:34.401+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:20:34.402+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T16:20:34.404+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T16:20:34.405+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T16:20:34.419+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T16:20:34.420+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T16:20:34.426+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T16:20:34.427+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T16:20:34.434+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:34.435+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:34.435+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:34.456+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T16:20:34.458+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T16:20:34.461+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T16:20:34.468+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T16:20:34.488+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:20:34.612+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T16:20:34.613+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:34.613+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:34.615+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T16:20:34.622+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T16:20:34.623+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T16:20:34.636+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T16:20:34.637+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T16:20:34.640+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T16:20:34.641+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T16:20:34.675+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T16:20:34.678+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T16:20:34.682+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T16:20:34.683+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T16:20:34.697+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T16:20:34.698+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T16:20:34.701+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T16:20:34.702+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T16:20:34.730+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T16:20:34.733+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T16:20:34.737+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T16:20:34.738+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T16:20:34.746+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T16:20:34.756+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T16:20:34.757+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T16:20:34.760+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T16:20:34.766+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T16:20:34.785+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:20:34.917+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T16:20:34.920+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:34.921+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:34.924+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T16:20:34.931+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T16:20:34.933+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T16:20:34.953+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T16:20:34.955+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T16:20:34.957+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T16:20:34.958+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T16:20:34.974+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T16:20:34.976+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T16:20:34.978+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T16:20:34.979+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T16:20:34.983+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T16:20:34.993+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T16:20:34.994+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T16:20:34.997+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T16:20:34.998+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T16:20:35.017+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T16:20:35.019+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T16:20:35.022+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T16:20:35.023+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T16:20:35.023+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T16:20:35.035+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T16:20:35.037+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T16:20:35.039+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T16:20:35.040+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T16:20:35.049+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T16:20:35.050+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T16:20:35.050+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T16:20:35.053+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T16:20:35.054+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T16:20:35.098+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T16:20:35.103+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T16:20:35.106+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T16:20:35.107+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T16:20:35.125+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.125+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T16:20:35.126+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.127+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T16:20:35.129+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T16:20:35.130+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T16:20:35.175+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T16:20:35.179+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T16:20:35.191+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T16:20:35.192+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T16:20:35.213+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T16:20:35.213+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:35.213+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:35.214+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T16:20:35.218+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T16:20:35.219+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T16:20:35.226+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:20:35.226+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:20:35.238+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T16:20:35.239+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:20:35.239+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:20:35.239+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:20:35.239+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:20:35.239+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:20:35.239+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:20:35.240+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:20:35.241+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:20:35.241+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:20:35.241+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T16:20:35.243+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T16:20:35.244+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T16:20:35.257+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T16:20:35.258+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T16:20:35.261+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T16:20:35.262+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T16:20:35.300+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T16:20:35.301+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:20:35.301+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:20:35.302+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.303+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.304+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:20:35.304+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:20:35.304+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T16:20:35.307+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T16:20:35.308+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T16:20:35.312+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:20:35.312+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:20:35.316+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T16:20:35.316+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T16:20:35.317+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T16:20:35.318+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:20:35.318+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T16:20:35.318+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T16:20:35.320+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T16:20:35.321+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T16:20:35.342+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T16:20:35.344+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T16:20:35.347+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T16:20:35.348+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T16:20:35.370+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T16:20:35.372+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T16:20:35.375+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T16:20:35.375+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T16:20:35.392+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T16:20:35.392+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T16:20:35.392+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T16:20:35.392+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T16:20:35.393+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T16:20:35.394+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T16:20:35.396+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T16:20:35.397+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T16:20:35.412+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T16:20:35.413+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T16:20:35.416+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T16:20:35.417+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T16:20:35.444+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T16:20:35.445+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T16:20:35.445+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T16:20:35.445+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:20:35.445+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:20:35.445+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T16:20:35.446+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.447+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T16:20:35.450+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T16:20:35.451+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T16:20:35.470+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T16:20:35.471+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T16:20:35.475+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T16:20:35.475+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T16:20:35.492+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T16:20:35.494+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T16:20:35.502+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T16:20:35.503+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T16:20:35.510+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:20:35.510+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:20:35.522+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T16:20:35.523+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:20:35.523+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:20:35.523+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:20:35.523+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:20:35.523+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:20:35.523+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:20:35.524+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T16:20:35.528+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T16:20:35.528+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T16:20:35.535+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T16:20:35.536+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T16:20:35.539+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T16:20:35.540+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T16:20:35.564+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T16:20:35.565+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T16:20:35.570+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T16:20:35.571+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T16:20:35.572+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:20:35.573+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:20:35.581+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T16:20:35.587+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T16:20:35.587+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T16:20:35.587+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:20:35.588+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T16:20:35.589+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T16:20:35.589+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T16:20:35.592+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T16:20:35.593+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T16:20:35.605+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:35.606+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:20:35.608+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T16:20:35.609+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:35.609+01:00 ERROR 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:20:35.609+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T16:20:35.613+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T16:20:35.614+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T16:20:35.629+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T16:20:35.630+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T16:20:35.634+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T16:20:35.635+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T16:20:35.680+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T16:20:35.683+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T16:20:35.688+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T16:20:35.689+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T16:20:35.723+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T16:20:35.724+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T16:20:35.729+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T16:20:35.729+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T16:20:35.731+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:20:35.731+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T16:20:35.734+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.742+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T16:20:35.743+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T16:20:35.746+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T16:20:35.747+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T16:20:35.751+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.752+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.752+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.753+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.754+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.754+01:00  WARN 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:20:35.766+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T16:20:35.767+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T16:20:35.771+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T16:20:35.772+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T16:20:35.813+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T16:20:35.815+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T16:20:35.820+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T16:20:35.821+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T16:20:35.834+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T16:20:35.835+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T16:20:35.838+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T16:20:35.839+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T16:20:35.854+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T16:20:35.856+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T16:20:35.860+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T16:20:38.376+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:20:38.387+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T16:20:38.389+01:00  INFO 11408 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T16:22:22.658+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 6504 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T16:22:22.661+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T16:22:23.828+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T16:22:23.831+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T16:22:24.066+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 224 ms. Found 5 JPA repository interfaces.
2025-01-10T16:22:24.766+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T16:22:24.785+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T16:22:24.786+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T16:22:24.872+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T16:22:24.873+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2149 ms
2025-01-10T16:22:25.114+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T16:22:25.416+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:28e2e385-affd-49e2-b615-4e0347aae671 user=SA
2025-01-10T16:22:25.419+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T16:22:25.484+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T16:22:25.571+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T16:22:25.622+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T16:22:26.080+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T16:22:26.725+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:22:26.726+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T16:22:27.686+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T16:22:27.797+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:22:27.896+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T16:22:28.883+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T16:22:28.893+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 6.918 seconds (process running for 7.878)
2025-01-10T16:22:28.897+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T16:22:28.906+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T16:22:29.016+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of afanaole
2025-01-10T16:22:29.060+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of afanaole has been evaluated
2025-01-10T16:22:29.065+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T16:22:29.066+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T16:22:29.105+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of allaebek
2025-01-10T16:22:29.106+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:22:29.107+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T16:22:29.107+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T16:22:29.107+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T16:22:29.108+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T16:22:29.109+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T16:22:29.110+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T16:22:29.110+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T16:22:29.110+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T16:22:29.110+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T16:22:29.110+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T16:22:29.110+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T16:22:29.111+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T16:22:29.111+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T16:22:29.111+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T16:22:29.111+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T16:22:29.111+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T16:22:29.112+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T16:22:29.112+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T16:22:29.112+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T16:22:29.112+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T16:22:29.112+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:22:29.112+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T16:22:29.113+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:22:29.114+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T16:22:29.114+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T16:22:29.114+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T16:22:29.114+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of allaebek has been evaluated
2025-01-10T16:22:29.117+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T16:22:29.118+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T16:22:29.157+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of alshadan
2025-01-10T16:22:29.162+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of alshadan has been evaluated
2025-01-10T16:22:29.166+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T16:22:29.168+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T16:22:29.211+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ambrojak
2025-01-10T16:22:29.215+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ambrojak has been evaluated
2025-01-10T16:22:29.225+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T16:22:29.226+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T16:22:29.344+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of banertam
2025-01-10T16:22:29.350+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of banertam has been evaluated
2025-01-10T16:22:29.354+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T16:22:29.355+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T16:22:29.365+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:29.366+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:29.367+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:29.392+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of bendasta
2025-01-10T16:22:29.395+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of bendasta has been evaluated
2025-01-10T16:22:29.399+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T16:22:29.400+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T16:22:29.414+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dedtoma1
2025-01-10T16:22:29.415+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dedtoma1 has been evaluated
2025-01-10T16:22:29.423+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T16:22:29.424+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T16:22:29.448+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of durisja4
2025-01-10T16:22:29.451+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:29.451+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:29.452+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of durisja4 has been evaluated
2025-01-10T16:22:29.456+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T16:22:29.458+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T16:22:29.488+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of dvorak22
2025-01-10T16:22:29.490+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of dvorak22 has been evaluated
2025-01-10T16:22:29.493+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T16:22:29.494+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T16:22:29.538+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of foltyka1
2025-01-10T16:22:29.541+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of foltyka1 has been evaluated
2025-01-10T16:22:29.549+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T16:22:29.550+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T16:22:29.569+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of gogatgio
2025-01-10T16:22:29.570+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of gogatgio has been evaluated
2025-01-10T16:22:29.573+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T16:22:29.574+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T16:22:29.623+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hamaljan
2025-01-10T16:22:29.628+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hamaljan has been evaluated
2025-01-10T16:22:29.632+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T16:22:29.633+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T16:22:29.675+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hannoemi
2025-01-10T16:22:29.675+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:22:29.676+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:22:29.677+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:22:29.678+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:22:29.678+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:22:29.678+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:22:29.678+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:22:29.679+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:22:29.680+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:22:29.680+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.680+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.681+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.681+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.681+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.681+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:22:29.681+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:22:29.682+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hannoemi has been evaluated
2025-01-10T16:22:29.685+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T16:22:29.686+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T16:22:29.719+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hasanmir
2025-01-10T16:22:29.722+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hasanmir has been evaluated
2025-01-10T16:22:29.725+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T16:22:29.726+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T16:22:29.729+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T16:22:29.731+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T16:22:29.735+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:22:29.737+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T16:22:29.740+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T16:22:29.742+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T16:22:29.745+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T16:22:29.747+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T16:22:29.748+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T16:22:29.750+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T16:22:29.756+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T16:22:29.761+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of herczmax
2025-01-10T16:22:29.763+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of herczmax has been evaluated
2025-01-10T16:22:29.765+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T16:22:29.766+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T16:22:29.794+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of hliavhan
2025-01-10T16:22:29.796+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of hliavhan has been evaluated
2025-01-10T16:22:29.799+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T16:22:29.800+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T16:22:29.817+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of holotdan
2025-01-10T16:22:29.819+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of holotdan has been evaluated
2025-01-10T16:22:29.824+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T16:22:29.825+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T16:22:29.863+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of horejvo1
2025-01-10T16:22:29.867+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of horejvo1 has been evaluated
2025-01-10T16:22:29.873+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T16:22:29.874+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T16:22:29.890+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.891+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.892+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.893+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.894+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.895+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.896+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:29.897+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of houskond
2025-01-10T16:22:29.899+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of houskond has been evaluated
2025-01-10T16:22:29.902+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T16:22:29.909+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T16:22:29.932+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of iusupart
2025-01-10T16:22:29.934+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of iusupart has been evaluated
2025-01-10T16:22:29.937+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T16:22:29.939+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T16:22:29.978+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jafargur
2025-01-10T16:22:29.978+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:22:29.979+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:22:29.979+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:22:29.979+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:22:29.979+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:22:29.980+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:22:29.981+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.981+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.981+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.981+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.981+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:29.981+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:22:29.982+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:22:29.982+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jafargur has been evaluated
2025-01-10T16:22:29.985+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T16:22:29.986+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T16:22:30.000+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of jagosmar
2025-01-10T16:22:30.001+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of jagosmar has been evaluated
2025-01-10T16:22:30.004+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T16:22:30.005+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T16:22:30.012+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:30.013+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:30.014+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:30.034+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kankaluk
2025-01-10T16:22:30.036+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kankaluk has been evaluated
2025-01-10T16:22:30.039+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T16:22:30.047+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T16:22:30.070+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:22:30.184+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kaufmlu1
2025-01-10T16:22:30.185+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:30.185+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:30.189+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kaufmlu1 has been evaluated
2025-01-10T16:22:30.198+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T16:22:30.199+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T16:22:30.212+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kolarj55
2025-01-10T16:22:30.214+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kolarj55 has been evaluated
2025-01-10T16:22:30.216+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T16:22:30.217+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T16:22:30.255+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of krausj13
2025-01-10T16:22:30.258+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of krausj13 has been evaluated
2025-01-10T16:22:30.263+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T16:22:30.263+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T16:22:30.277+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kulikvl1
2025-01-10T16:22:30.279+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kulikvl1 has been evaluated
2025-01-10T16:22:30.281+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T16:22:30.282+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T16:22:30.310+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kundrdom
2025-01-10T16:22:30.313+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kundrdom has been evaluated
2025-01-10T16:22:30.316+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T16:22:30.316+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T16:22:30.324+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T16:22:30.334+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kunstja2
2025-01-10T16:22:30.336+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kunstja2 has been evaluated
2025-01-10T16:22:30.339+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T16:22:30.345+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T16:22:30.370+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T16:22:30.549+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of kvardro2
2025-01-10T16:22:30.552+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:30.552+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:30.556+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of kvardro2 has been evaluated
2025-01-10T16:22:30.568+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T16:22:30.569+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T16:22:30.587+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lemakter
2025-01-10T16:22:30.589+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lemakter has been evaluated
2025-01-10T16:22:30.591+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T16:22:30.592+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T16:22:30.612+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of liskaji8
2025-01-10T16:22:30.614+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of liskaji8 has been evaluated
2025-01-10T16:22:30.617+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T16:22:30.618+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T16:22:30.623+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T16:22:30.633+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of lokajva1
2025-01-10T16:22:30.635+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of lokajva1 has been evaluated
2025-01-10T16:22:30.638+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T16:22:30.639+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T16:22:30.658+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of losinmar
2025-01-10T16:22:30.659+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of losinmar has been evaluated
2025-01-10T16:22:30.662+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T16:22:30.663+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T16:22:30.664+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T16:22:30.676+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of majerto4
2025-01-10T16:22:30.678+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of majerto4 has been evaluated
2025-01-10T16:22:30.680+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T16:22:30.681+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T16:22:30.692+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mezermat
2025-01-10T16:22:30.693+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T16:22:30.694+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mezermat has been evaluated
2025-01-10T16:22:30.697+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T16:22:30.699+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T16:22:30.765+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of mickavo2
2025-01-10T16:22:30.771+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of mickavo2 has been evaluated
2025-01-10T16:22:30.776+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T16:22:30.777+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T16:22:30.796+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of moravp15
2025-01-10T16:22:30.796+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T16:22:30.796+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T16:22:30.797+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T16:22:30.798+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T16:22:30.799+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of moravp15 has been evaluated
2025-01-10T16:22:30.802+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T16:22:30.804+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T16:22:30.856+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of neprater
2025-01-10T16:22:30.862+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of neprater has been evaluated
2025-01-10T16:22:30.866+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T16:22:30.867+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T16:22:30.886+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ovsyaver
2025-01-10T16:22:30.887+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:30.887+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:30.888+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ovsyaver has been evaluated
2025-01-10T16:22:30.892+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T16:22:30.893+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T16:22:30.905+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:22:30.905+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:22:30.918+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pejsomic
2025-01-10T16:22:30.918+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:22:30.918+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:22:30.918+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:22:30.919+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:22:30.919+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:22:30.919+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:22:30.919+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:22:30.919+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:22:30.920+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pejsomic has been evaluated
2025-01-10T16:22:30.923+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T16:22:30.924+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T16:22:30.937+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pelikon1
2025-01-10T16:22:30.938+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pelikon1 has been evaluated
2025-01-10T16:22:30.941+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T16:22:30.942+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T16:22:30.982+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of perevyul
2025-01-10T16:22:30.982+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T16:22:30.982+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T16:22:30.983+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T16:22:30.984+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T16:22:30.984+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T16:22:30.984+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:30.984+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:30.984+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:30.984+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:30.985+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:30.985+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T16:22:30.985+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T16:22:30.985+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of perevyul has been evaluated
2025-01-10T16:22:30.989+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T16:22:30.989+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T16:22:30.994+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:22:30.994+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:22:31.000+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pichajak
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T16:22:31.000+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T16:22:31.001+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pichajak has been evaluated
2025-01-10T16:22:31.004+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T16:22:31.005+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T16:22:31.038+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of popelrob
2025-01-10T16:22:31.040+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of popelrob has been evaluated
2025-01-10T16:22:31.043+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T16:22:31.044+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T16:22:31.066+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of pucekrad
2025-01-10T16:22:31.068+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of pucekrad has been evaluated
2025-01-10T16:22:31.071+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T16:22:31.071+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T16:22:31.087+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rakusdan
2025-01-10T16:22:31.087+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T16:22:31.087+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T16:22:31.087+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T16:22:31.087+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T16:22:31.087+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T16:22:31.087+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T16:22:31.088+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rakusdan has been evaluated
2025-01-10T16:22:31.091+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T16:22:31.092+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T16:22:31.107+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rodrixav
2025-01-10T16:22:31.108+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rodrixav has been evaluated
2025-01-10T16:22:31.111+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T16:22:31.112+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T16:22:31.133+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rudzeanh
2025-01-10T16:22:31.134+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T16:22:31.134+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T16:22:31.134+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:22:31.134+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T16:22:31.134+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T16:22:31.134+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T16:22:31.135+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T16:22:31.136+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rudzeanh has been evaluated
2025-01-10T16:22:31.139+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T16:22:31.140+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T16:22:31.164+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of rystidia
2025-01-10T16:22:31.166+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of rystidia has been evaluated
2025-01-10T16:22:31.170+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T16:22:31.171+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T16:22:31.187+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of shaninee
2025-01-10T16:22:31.188+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of shaninee has been evaluated
2025-01-10T16:22:31.191+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T16:22:31.192+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T16:22:31.200+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T16:22:31.200+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T16:22:31.212+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sobotvo2
2025-01-10T16:22:31.212+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T16:22:31.212+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T16:22:31.212+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T16:22:31.212+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T16:22:31.212+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T16:22:31.212+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T16:22:31.213+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T16:22:31.213+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T16:22:31.213+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T16:22:31.213+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T16:22:31.213+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T16:22:31.213+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T16:22:31.214+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T16:22:31.214+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T16:22:31.214+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T16:22:31.214+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sobotvo2 has been evaluated
2025-01-10T16:22:31.218+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T16:22:31.218+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T16:22:31.225+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stepad10
2025-01-10T16:22:31.226+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stepad10 has been evaluated
2025-01-10T16:22:31.230+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T16:22:31.231+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T16:22:31.251+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of stulcrad
2025-01-10T16:22:31.252+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of stulcrad has been evaluated
2025-01-10T16:22:31.255+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T16:22:31.256+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T16:22:31.257+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:22:31.257+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T16:22:31.262+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T16:22:31.268+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of sukdojak
2025-01-10T16:22:31.268+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T16:22:31.268+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T16:22:31.268+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T16:22:31.268+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T16:22:31.268+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T16:22:31.268+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T16:22:31.269+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T16:22:31.269+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T16:22:31.269+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T16:22:31.269+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T16:22:31.269+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of sukdojak has been evaluated
2025-01-10T16:22:31.272+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T16:22:31.273+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T16:22:31.287+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:31.288+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T16:22:31.290+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of susicpav
2025-01-10T16:22:31.290+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:31.290+01:00 ERROR 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.t.checker.bson.QueryMatcher  : Unsupported selector: $expr
2025-01-10T16:22:31.291+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of susicpav has been evaluated
2025-01-10T16:22:31.295+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T16:22:31.296+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T16:22:31.310+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of svobola7
2025-01-10T16:22:31.311+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of svobola7 has been evaluated
2025-01-10T16:22:31.315+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T16:22:31.316+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T16:22:31.360+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of thakuvik
2025-01-10T16:22:31.363+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of thakuvik has been evaluated
2025-01-10T16:22:31.368+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T16:22:31.369+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T16:22:31.413+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tsayvyac
2025-01-10T16:22:31.415+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tsayvyac has been evaluated
2025-01-10T16:22:31.420+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T16:22:31.421+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T16:22:31.422+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T16:22:31.423+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T16:22:31.426+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.434+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tumaji10
2025-01-10T16:22:31.434+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tumaji10 has been evaluated
2025-01-10T16:22:31.438+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T16:22:31.439+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T16:22:31.444+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.445+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.446+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.446+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.447+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.447+01:00  WARN 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T16:22:31.459+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of tychtjan
2025-01-10T16:22:31.460+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of tychtjan has been evaluated
2025-01-10T16:22:31.464+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T16:22:31.465+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T16:22:31.499+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of ulcheyev
2025-01-10T16:22:31.500+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of ulcheyev has been evaluated
2025-01-10T16:22:31.505+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T16:22:31.506+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T16:22:31.516+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of umlaspro
2025-01-10T16:22:31.518+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of umlaspro has been evaluated
2025-01-10T16:22:31.521+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T16:22:31.522+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T16:22:31.537+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Successfully parsed the script of vonasmic
2025-01-10T16:22:31.538+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.text.StudentEvaluator        : Script of vonasmic has been evaluated
2025-01-10T16:22:31.542+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T16:22:32.670+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T16:22:32.682+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T16:22:32.683+01:00  INFO 6504 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T19:24:26.345+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 21752 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T19:24:26.349+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T19:24:27.590+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T19:24:27.593+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T19:24:27.834+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 229 ms. Found 5 JPA repository interfaces.
2025-01-10T19:24:28.640+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T19:24:28.662+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T19:24:28.663+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T19:24:28.764+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T19:24:28.764+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2344 ms
2025-01-10T19:24:29.033+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T19:24:29.401+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:d3b77666-1155-4ab3-adf6-128cbe6a523f user=SA
2025-01-10T19:24:29.404+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T19:24:29.509+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T19:24:29.734+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T19:24:29.836+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T19:24:30.449+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T19:24:31.214+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T19:24:31.215+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T19:24:32.291+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T19:24:32.404+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T19:24:32.521+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T19:24:33.623+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T19:24:33.633+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 8.028 seconds (process running for 9.239)
2025-01-10T19:24:33.637+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: /Users/Denis/Desktop/3year2024-25/bakalarka/mongodb_assignment_evaluator/scripts
2025-01-10T19:24:33.651+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T19:24:33.768+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of afanaole
2025-01-10T19:24:33.812+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of afanaole has been evaluated
2025-01-10T19:24:33.818+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T19:24:33.820+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T19:24:33.865+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of allaebek
2025-01-10T19:24:33.867+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T19:24:33.868+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T19:24:33.868+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T19:24:33.869+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T19:24:33.869+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T19:24:33.869+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T19:24:33.869+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T19:24:33.870+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T19:24:33.871+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T19:24:33.872+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T19:24:33.873+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T19:24:33.874+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T19:24:33.874+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T19:24:33.875+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T19:24:33.875+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T19:24:33.875+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T19:24:33.875+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T19:24:33.875+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T19:24:33.875+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T19:24:33.876+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T19:24:33.876+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of allaebek has been evaluated
2025-01-10T19:24:33.879+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T19:24:33.882+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T19:24:33.928+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of alshadan
2025-01-10T19:24:33.933+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of alshadan has been evaluated
2025-01-10T19:24:33.938+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T19:24:33.940+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T19:24:33.983+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of ambrojak
2025-01-10T19:24:33.987+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of ambrojak has been evaluated
2025-01-10T19:24:33.997+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T19:24:33.999+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T19:24:34.135+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of banertam
2025-01-10T19:24:34.141+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of banertam has been evaluated
2025-01-10T19:24:34.147+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T19:24:34.149+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T19:24:34.159+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:34.160+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:34.161+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:34.190+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of bendasta
2025-01-10T19:24:34.193+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of bendasta has been evaluated
2025-01-10T19:24:34.197+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T19:24:34.199+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T19:24:34.213+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of dedtoma1
2025-01-10T19:24:34.215+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of dedtoma1 has been evaluated
2025-01-10T19:24:34.222+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T19:24:34.224+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T19:24:34.240+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of durisja4
2025-01-10T19:24:34.241+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:34.241+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:34.242+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of durisja4 has been evaluated
2025-01-10T19:24:34.245+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T19:24:34.247+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T19:24:34.269+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of dvorak22
2025-01-10T19:24:34.272+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of dvorak22 has been evaluated
2025-01-10T19:24:34.275+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T19:24:34.278+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T19:24:34.322+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of foltyka1
2025-01-10T19:24:34.325+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of foltyka1 has been evaluated
2025-01-10T19:24:34.333+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T19:24:34.335+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T19:24:34.355+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of gogatgio
2025-01-10T19:24:34.357+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of gogatgio has been evaluated
2025-01-10T19:24:34.360+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T19:24:34.362+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T19:24:34.414+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hamaljan
2025-01-10T19:24:34.422+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hamaljan has been evaluated
2025-01-10T19:24:34.426+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T19:24:34.429+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T19:24:34.478+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hannoemi
2025-01-10T19:24:34.479+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T19:24:34.479+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T19:24:34.480+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T19:24:34.481+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T19:24:34.481+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T19:24:34.481+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T19:24:34.481+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T19:24:34.481+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T19:24:34.482+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T19:24:34.483+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.483+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.483+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.484+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.484+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.484+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T19:24:34.484+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T19:24:34.484+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hannoemi has been evaluated
2025-01-10T19:24:34.487+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T19:24:34.489+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T19:24:34.523+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hasanmir
2025-01-10T19:24:34.526+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hasanmir has been evaluated
2025-01-10T19:24:34.529+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T19:24:34.531+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T19:24:34.534+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T19:24:34.536+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T19:24:34.541+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T19:24:34.544+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T19:24:34.546+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T19:24:34.548+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T19:24:34.552+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T19:24:34.553+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T19:24:34.555+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T19:24:34.557+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T19:24:34.563+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T19:24:34.569+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of herczmax
2025-01-10T19:24:34.571+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of herczmax has been evaluated
2025-01-10T19:24:34.574+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T19:24:34.576+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T19:24:34.603+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hliavhan
2025-01-10T19:24:34.605+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hliavhan has been evaluated
2025-01-10T19:24:34.610+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T19:24:34.611+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T19:24:34.628+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of holotdan
2025-01-10T19:24:34.630+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of holotdan has been evaluated
2025-01-10T19:24:34.636+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T19:24:34.639+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T19:24:34.687+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of horejvo1
2025-01-10T19:24:34.690+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of horejvo1 has been evaluated
2025-01-10T19:24:34.694+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T19:24:34.696+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T19:24:34.709+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.711+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.714+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.714+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:34.715+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of houskond
2025-01-10T19:24:34.717+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of houskond has been evaluated
2025-01-10T19:24:34.720+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T19:24:34.723+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T19:24:34.764+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of iusupart
2025-01-10T19:24:34.766+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of iusupart has been evaluated
2025-01-10T19:24:34.770+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T19:24:34.772+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T19:24:34.815+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of jafargur
2025-01-10T19:24:34.815+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T19:24:34.815+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T19:24:34.816+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T19:24:34.816+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T19:24:34.816+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T19:24:34.817+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T19:24:34.818+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.818+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.818+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.818+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.818+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:34.819+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T19:24:34.819+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T19:24:34.819+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of jafargur has been evaluated
2025-01-10T19:24:34.823+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T19:24:34.825+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T19:24:34.839+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of jagosmar
2025-01-10T19:24:34.841+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of jagosmar has been evaluated
2025-01-10T19:24:34.844+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T19:24:34.846+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T19:24:34.858+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:34.859+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:34.860+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:34.885+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kankaluk
2025-01-10T19:24:34.887+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kankaluk has been evaluated
2025-01-10T19:24:34.891+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T19:24:34.898+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T19:24:34.921+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T19:24:35.056+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kaufmlu1
2025-01-10T19:24:35.058+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:35.058+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:35.061+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kaufmlu1 has been evaluated
2025-01-10T19:24:35.071+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T19:24:35.073+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T19:24:35.094+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kolarj55
2025-01-10T19:24:35.095+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kolarj55 has been evaluated
2025-01-10T19:24:35.098+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T19:24:35.100+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T19:24:35.133+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of krausj13
2025-01-10T19:24:35.135+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of krausj13 has been evaluated
2025-01-10T19:24:35.139+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T19:24:35.141+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T19:24:35.157+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kulikvl1
2025-01-10T19:24:35.158+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kulikvl1 has been evaluated
2025-01-10T19:24:35.161+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T19:24:35.163+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T19:24:35.191+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kundrdom
2025-01-10T19:24:35.193+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kundrdom has been evaluated
2025-01-10T19:24:35.197+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T19:24:35.198+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T19:24:35.206+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T19:24:35.221+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kunstja2
2025-01-10T19:24:35.223+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kunstja2 has been evaluated
2025-01-10T19:24:35.227+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T19:24:35.234+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T19:24:35.265+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T19:24:35.471+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kvardro2
2025-01-10T19:24:35.473+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:35.473+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:35.478+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kvardro2 has been evaluated
2025-01-10T19:24:35.490+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T19:24:35.492+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T19:24:35.511+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of lemakter
2025-01-10T19:24:35.513+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of lemakter has been evaluated
2025-01-10T19:24:35.517+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T19:24:35.519+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T19:24:35.537+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of liskaji8
2025-01-10T19:24:35.538+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of liskaji8 has been evaluated
2025-01-10T19:24:35.543+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T19:24:35.544+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T19:24:35.548+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T19:24:35.562+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of lokajva1
2025-01-10T19:24:35.564+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of lokajva1 has been evaluated
2025-01-10T19:24:35.567+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T19:24:35.568+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T19:24:35.592+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of losinmar
2025-01-10T19:24:35.595+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of losinmar has been evaluated
2025-01-10T19:24:35.599+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T19:24:35.600+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T19:24:35.601+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T19:24:35.613+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of majerto4
2025-01-10T19:24:35.615+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of majerto4 has been evaluated
2025-01-10T19:24:35.617+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T19:24:35.619+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T19:24:35.628+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of mezermat
2025-01-10T19:24:35.629+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T19:24:35.629+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of mezermat has been evaluated
2025-01-10T19:24:35.632+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T19:24:35.634+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T19:24:35.680+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of mickavo2
2025-01-10T19:24:35.686+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of mickavo2 has been evaluated
2025-01-10T19:24:35.691+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T19:24:35.692+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T19:24:35.711+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of moravp15
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.712+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T19:24:35.713+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T19:24:35.714+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T19:24:35.714+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T19:24:35.714+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T19:24:35.714+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T19:24:35.714+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of moravp15 has been evaluated
2025-01-10T19:24:35.717+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T19:24:35.719+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T19:24:35.767+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of neprater
2025-01-10T19:24:35.773+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of neprater has been evaluated
2025-01-10T19:24:35.778+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T19:24:35.780+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T19:24:35.796+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of ovsyaver
2025-01-10T19:24:35.797+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:35.797+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:35.798+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of ovsyaver has been evaluated
2025-01-10T19:24:35.802+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T19:24:35.803+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T19:24:35.811+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T19:24:35.811+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T19:24:35.823+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pejsomic
2025-01-10T19:24:35.823+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T19:24:35.824+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T19:24:35.825+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pejsomic has been evaluated
2025-01-10T19:24:35.828+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T19:24:35.829+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T19:24:35.842+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pelikon1
2025-01-10T19:24:35.844+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pelikon1 has been evaluated
2025-01-10T19:24:35.847+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T19:24:35.849+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T19:24:35.889+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of perevyul
2025-01-10T19:24:35.889+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T19:24:35.889+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T19:24:35.890+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T19:24:35.891+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T19:24:35.891+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T19:24:35.891+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T19:24:35.891+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T19:24:35.891+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T19:24:35.891+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T19:24:35.892+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of perevyul has been evaluated
2025-01-10T19:24:35.896+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T19:24:35.897+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T19:24:35.902+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T19:24:35.902+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T19:24:35.906+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pichajak
2025-01-10T19:24:35.906+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T19:24:35.906+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T19:24:35.906+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T19:24:35.906+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T19:24:35.907+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T19:24:35.908+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pichajak has been evaluated
2025-01-10T19:24:35.911+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T19:24:35.913+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T19:24:35.936+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of popelrob
2025-01-10T19:24:35.938+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of popelrob has been evaluated
2025-01-10T19:24:35.942+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T19:24:35.944+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T19:24:35.966+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pucekrad
2025-01-10T19:24:35.968+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pucekrad has been evaluated
2025-01-10T19:24:35.972+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T19:24:35.974+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T19:24:35.991+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rakusdan
2025-01-10T19:24:35.991+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T19:24:35.991+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T19:24:35.991+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T19:24:35.991+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T19:24:35.992+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rakusdan has been evaluated
2025-01-10T19:24:35.995+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T19:24:35.997+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T19:24:36.012+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rodrixav
2025-01-10T19:24:36.013+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rodrixav has been evaluated
2025-01-10T19:24:36.016+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T19:24:36.018+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T19:24:36.039+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rudzeanh
2025-01-10T19:24:36.040+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T19:24:36.040+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T19:24:36.041+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T19:24:36.042+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T19:24:36.043+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rudzeanh has been evaluated
2025-01-10T19:24:36.046+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T19:24:36.047+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T19:24:36.072+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rystidia
2025-01-10T19:24:36.074+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rystidia has been evaluated
2025-01-10T19:24:36.078+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T19:24:36.080+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T19:24:36.100+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of shaninee
2025-01-10T19:24:36.102+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of shaninee has been evaluated
2025-01-10T19:24:36.105+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T19:24:36.107+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T19:24:36.116+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T19:24:36.116+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T19:24:36.128+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of sobotvo2
2025-01-10T19:24:36.129+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T19:24:36.129+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T19:24:36.129+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T19:24:36.129+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T19:24:36.129+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T19:24:36.129+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T19:24:36.130+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T19:24:36.131+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T19:24:36.131+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of sobotvo2 has been evaluated
2025-01-10T19:24:36.134+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T19:24:36.135+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T19:24:36.146+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of stepad10
2025-01-10T19:24:36.147+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of stepad10 has been evaluated
2025-01-10T19:24:36.151+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T19:24:36.153+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T19:24:36.175+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of stulcrad
2025-01-10T19:24:36.175+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of stulcrad has been evaluated
2025-01-10T19:24:36.180+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T19:24:36.182+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T19:24:36.183+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T19:24:36.183+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T19:24:36.188+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T19:24:36.194+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of sukdojak
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T19:24:36.195+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T19:24:36.196+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T19:24:36.196+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T19:24:36.196+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of sukdojak has been evaluated
2025-01-10T19:24:36.200+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T19:24:36.201+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T19:24:36.215+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:36.215+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T19:24:36.218+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of susicpav
2025-01-10T19:24:36.218+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:36.219+01:00 ERROR 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T19:24:36.219+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of susicpav has been evaluated
2025-01-10T19:24:36.223+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T19:24:36.225+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T19:24:36.241+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of svobola7
2025-01-10T19:24:36.242+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of svobola7 has been evaluated
2025-01-10T19:24:36.246+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T19:24:36.248+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T19:24:36.294+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of thakuvik
2025-01-10T19:24:36.297+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of thakuvik has been evaluated
2025-01-10T19:24:36.302+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T19:24:36.304+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T19:24:36.338+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of tsayvyac
2025-01-10T19:24:36.340+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of tsayvyac has been evaluated
2025-01-10T19:24:36.346+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T19:24:36.348+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T19:24:36.349+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T19:24:36.350+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T19:24:36.353+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.361+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of tumaji10
2025-01-10T19:24:36.362+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of tumaji10 has been evaluated
2025-01-10T19:24:36.365+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T19:24:36.367+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T19:24:36.371+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.372+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.373+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.374+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.374+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.375+01:00  WARN 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T19:24:36.387+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of tychtjan
2025-01-10T19:24:36.389+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of tychtjan has been evaluated
2025-01-10T19:24:36.393+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T19:24:36.395+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T19:24:36.432+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of ulcheyev
2025-01-10T19:24:36.435+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of ulcheyev has been evaluated
2025-01-10T19:24:36.442+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T19:24:36.444+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T19:24:36.459+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of umlaspro
2025-01-10T19:24:36.461+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of umlaspro has been evaluated
2025-01-10T19:24:36.466+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T19:24:36.468+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T19:24:36.491+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of vonasmic
2025-01-10T19:24:36.493+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of vonasmic has been evaluated
2025-01-10T19:24:36.499+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T19:24:38.629+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T19:24:38.643+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T19:24:38.645+01:00  INFO 21752 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-01-10T20:02:41.233+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Starting MongodbAssignmentEvaluatorApplication using Java 21.0.5 with PID 13988 (C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator\target\classes started by Denis in C:\Users\Denis\Desktop\3year2024-25\bakalarka\mongodb_assignment_evaluator)
2025-01-10T20:02:41.237+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : No active profile set, falling back to 1 default profile: "default"
2025-01-10T20:02:42.521+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-10T20:02:42.524+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-10T20:02:42.767+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 229 ms. Found 5 JPA repository interfaces.
2025-01-10T20:02:43.648+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-01-10T20:02:43.671+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-01-10T20:02:43.672+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-10T20:02:43.771+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-01-10T20:02:43.771+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2435 ms
2025-01-10T20:02:44.063+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-01-10T20:02:44.443+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:913b8349-ea52-472e-8d1a-b3a18f1e3b8a user=SA
2025-01-10T20:02:44.446+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-01-10T20:02:44.523+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-10T20:02:44.644+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2025-01-10T20:02:44.718+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-01-10T20:02:45.278+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-10T20:02:46.044+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000038: Composite-id class does not override equals(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T20:02:46.045+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] org.hibernate.mapping.RootClass          : HHH000039: Composite-id class does not override hashCode(): cz.cvut.fel.mongodb_assignment_evaluator.application.model.entity.CriterionFulfillmentId
2025-01-10T20:02:47.153+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-10T20:02:47.288+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T20:02:47.386+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-10T20:02:48.497+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-01-10T20:02:48.508+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] .m.MongodbAssignmentEvaluatorApplication : Started MongodbAssignmentEvaluatorApplication in 8.085 seconds (process running for 9.271)
2025-01-10T20:02:48.513+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.config.EvaluationRunner          : Starting evaluation for directory: ./scripts
2025-01-10T20:02:48.523+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of afanaole
2025-01-10T20:02:48.644+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of afanaole
2025-01-10T20:02:48.689+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of afanaole has been evaluated
2025-01-10T20:02:48.694+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for afanaole
2025-01-10T20:02:48.696+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of allaebek
2025-01-10T20:02:48.738+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of allaebek
2025-01-10T20:02:48.740+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10248, customerId: "ALFKI", employeeId: 5, orderDate: ISODate("2023-01-01")});'
2025-01-10T20:02:48.741+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10249, customerId: "ANATR", employeeId: 6, orderDate: ISODate("2023-01-02")});'
2025-01-10T20:02:48.741+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10250, customerId: "ANTON", employeeId: 4, orderDate: ISODate("2023-01-03")});'
2025-01-10T20:02:48.742+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10251, customerId: "AROUT", employeeId: 3, orderDate: ISODate("2023-01-04")});'
2025-01-10T20:02:48.742+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertOne({ id: 10252, customerId: "BERGS", employeeId: 1, orderDate: ISODate("2023-01-05")});'
2025-01-10T20:02:48.742+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.insertMany([{ id: 10253, customerId: "BLAUS", employeeId: 2, orderDate: ISODate("2023-01-06") }{ id: 10254, customerId: "BLONP", employeeId: 9, orderDate: ISODate("2023-01-07") }{ id: 10255, customerId: "BOLID", employeeId: 7, orderDate: ISODate("2023-01-08") }{ id: 10256, customerId: "BONAP", employeeId: 8, orderDate: ISODate("2023-01-09") }{ id: 10257, customerId: "BOTTM", employeeId: 10, orderDate: ISODate("2023-01-10") }]);'
2025-01-10T20:02:48.742+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 1, unitPrice: 14.00, quantity: 12, discount: 0 });'
2025-01-10T20:02:48.742+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 2, unitPrice: 9.80, quantity: 10, discount: 0 });'
2025-01-10T20:02:48.743+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10248, productId: 3, unitPrice: 34.80, quantity: 5, discount: 0 });'
2025-01-10T20:02:48.743+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 4, unitPrice: 18.60, quantity: 9, discount: 0 });'
2025-01-10T20:02:48.743+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertOne({ orderId: 10249, productId: 5, unitPrice: 42.40, quantity: 40, discount: 0 });'
2025-01-10T20:02:48.743+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10250, productId: 7, unitPrice: 42.40, quantity: 35, discount: 0 }{ orderId: 10250, productId: 8, unitPrice: 21.05, quantity: 15, discount: 0 }{ orderId: 10250, productId: 9, unitPrice: 21.00, quantity: 6, discount: 0 }{ orderId: 10251, productId: 10, unitPrice: 24.00, quantity: 20, discount: 0 }{ orderId: 10251, productId: 11, unitPrice: 10.00, quantity: 30, discount: 0 }{ orderId: 10252, productId: 12, unitPrice: 18.60, quantity: 35, discount: 0 }{ orderId: 10252, productId: 13, unitPrice: 42.40, quantity: 25, discount: 0 }{ orderId: 10252, productId: 14, unitPrice: 18.00, quantity: 50, discount: 0 }{ orderId: 10253, productId: 15, unitPrice: 9.65, quantity: 10, discount: 0 }{ orderId: 10253, productId: 1, unitPrice: 42.40, quantity: 3, discount: 0 }{ orderId: 10254, productId: 3, unitPrice: 21.00, quantity: 48, discount: 0 }{ orderId: 10254, productId: 4, unitPrice: 19.50, quantity: 15, discount: 0 }{ orderId: 10255, productId: 6, unitPrice: 14.00, quantity: 24, discount: 0 }{ orderId: 10255, productId: 7, unitPrice: 17.45, quantity: 10, discount: 0 }{ orderId: 10256, productId: 9, unitPrice: 12.50, quantity: 20, discount: 0 }]);'
2025-01-10T20:02:48.743+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.replaceOne({id:10248},{id:10248, customerId:"BONAP", employeId:10, orderDate: ISODate("2023-01-01")});'
2025-01-10T20:02:48.744+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{customerId: "Hello"}});'
2025-01-10T20:02:48.744+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateMany({discount:0},{$mul:{unitPrice:1.1}});'
2025-01-10T20:02:48.744+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateMany({},{$set:{status:"pending"}});'
2025-01-10T20:02:48.744+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set: {"address.city":"prageu", "address.country":"Czech Republic", "address.post":"100"}});'
2025-01-10T20:02:48.744+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({id:10248},{$set:{"address.city":"Brno"}});'
2025-01-10T20:02:48.744+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $push: { products: { productId: 1, unitPrice: 99 } }});'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({orderId: 10248, "products.productId":1},{$set:{"products.$.unitPrice": 50}});'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.updateOne({ orderId: 10248 },{ $pull: { products: { productId: 1 } } });'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.updateOne({ id: 2000 },{ $set: { status: "pending" } },{ upsert: true });'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({$or:[{customerId:"ALFKI"}, {customerId:"ANATR"}]}).forEach(printjson);'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.insertMany([{ orderId: 10248, products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ] }{ orderId: 10249, products: [ { productId: 3, quantity: 30, unitPrice: 30.00 }, { productId: 4, quantity: 5, unitPrice: 40.00 } ] }{ orderId: 10250, products: [ { productId: 5, quantity: 12, unitPrice: 50.00 }, { productId: 6, quantity: 40, unitPrice: 60.00 } ] }]);'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: { $elemMatch: { quantity: { $gt: 20 } } } },{ orderId: 1, products: 1, _id: 0 }).forEach(printjson);'
2025-01-10T20:02:48.745+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ orderDate: -1 }).forEach(printjson);'
2025-01-10T20:02:48.746+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({}).sort({ employeeId: 1, orderDate: -1 }).forEach(printjson);'
2025-01-10T20:02:48.746+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ productId: 5 }).forEach(printjson);'
2025-01-10T20:02:48.746+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ quantity: { $gt: 20 } }).forEach(printjson);'
2025-01-10T20:02:48.746+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.find({ orderDate: { $gte: ISODate("2023-01-01"), $lte: ISODate("2023-01-31") }}).forEach(printjson);'
2025-01-10T20:02:48.746+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ products: [ { productId: 1, quantity: 15, unitPrice: 10.00 }, { productId: 2, quantity: 25, unitPrice: 20.00 } ]}).forEach(printjson);'
2025-01-10T20:02:48.746+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.find({ "products.productId": 6}).forEach(printjson);'
2025-01-10T20:02:48.747+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orders' doesn't exist. Query='db.orders.aggregate([{ $lookup: { from: "orderDetails", localField: "id", foreignField: "orderId", as: "orderDetails" } }]).forEach(printjson);'
2025-01-10T20:02:48.747+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T20:02:48.747+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T20:02:48.747+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T20:02:48.748+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T20:02:48.748+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T20:02:48.748+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T20:02:48.748+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $match: { quantity: { $gt: 10 } } }{ $group: { _id: "$orderId", totalQuantity: { $sum: "$quantity" } } }]).forEach(printjson);'
2025-01-10T20:02:48.748+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $project: { orderId: 1, productId: 1, unitPrice: 1, quantity: 1, totalPrice: { $multiply: ["$unitPrice", "$quantity"] } } }]).forEach(printjson);'
2025-01-10T20:02:48.748+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", totalPrice: { $sum: { $multiply: ["$unitPrice", "$quantity"] } } } }{ $sort: { totalPrice: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T20:02:48.749+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $skip: 5 }{ $count: "remainingProducts" }]).forEach(printjson);'
2025-01-10T20:02:48.749+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", minPrice: { $min: "$unitPrice" }, maxPrice: { $max: "$unitPrice" } } }]).forEach(printjson);'
2025-01-10T20:02:48.749+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'orderDetails' doesn't exist. Query='db.orderDetails.aggregate([{ $group: { _id: "$orderId", /* Group by orderId*/ totalSum: { $sum: { $multiply: ["$unitPrice", "$quantity"] } /* Calculate total sum for each order*/ } } }{ $sort: { totalSum: -1 } /* Sort by totalSum in descending order*/ }{ $group: { _id: null, /* Group all documents into one group*/ mostExpensiveOrder: { $first: "$$ROOT" } /* Use $first to get the document with the highest totalSum*/ } }]).forEach(printjson);'
2025-01-10T20:02:48.749+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of allaebek has been evaluated
2025-01-10T20:02:48.753+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for allaebek
2025-01-10T20:02:48.754+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of alshadan
2025-01-10T20:02:48.802+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of alshadan
2025-01-10T20:02:48.807+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of alshadan has been evaluated
2025-01-10T20:02:48.811+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for alshadan
2025-01-10T20:02:48.812+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ambrojak
2025-01-10T20:02:48.856+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of ambrojak
2025-01-10T20:02:48.861+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of ambrojak has been evaluated
2025-01-10T20:02:48.871+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ambrojak
2025-01-10T20:02:48.873+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of banertam
2025-01-10T20:02:49.015+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of banertam
2025-01-10T20:02:49.021+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of banertam has been evaluated
2025-01-10T20:02:49.026+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for banertam
2025-01-10T20:02:49.028+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of bendasta
2025-01-10T20:02:49.039+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:49.040+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:49.041+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:49.066+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of bendasta
2025-01-10T20:02:49.070+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of bendasta has been evaluated
2025-01-10T20:02:49.074+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for bendasta
2025-01-10T20:02:49.076+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dedtoma1
2025-01-10T20:02:49.089+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of dedtoma1
2025-01-10T20:02:49.091+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of dedtoma1 has been evaluated
2025-01-10T20:02:49.097+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dedtoma1
2025-01-10T20:02:49.099+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of durisja4
2025-01-10T20:02:49.114+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of durisja4
2025-01-10T20:02:49.115+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:49.115+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:49.116+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of durisja4 has been evaluated
2025-01-10T20:02:49.119+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for durisja4
2025-01-10T20:02:49.120+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of dvorak22
2025-01-10T20:02:49.142+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of dvorak22
2025-01-10T20:02:49.145+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of dvorak22 has been evaluated
2025-01-10T20:02:49.148+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for dvorak22
2025-01-10T20:02:49.149+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of foltyka1
2025-01-10T20:02:49.195+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of foltyka1
2025-01-10T20:02:49.198+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of foltyka1 has been evaluated
2025-01-10T20:02:49.207+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for foltyka1
2025-01-10T20:02:49.208+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of gogatgio
2025-01-10T20:02:49.227+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of gogatgio
2025-01-10T20:02:49.229+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of gogatgio has been evaluated
2025-01-10T20:02:49.233+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for gogatgio
2025-01-10T20:02:49.235+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hamaljan
2025-01-10T20:02:49.288+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hamaljan
2025-01-10T20:02:49.294+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hamaljan has been evaluated
2025-01-10T20:02:49.299+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hamaljan
2025-01-10T20:02:49.301+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hannoemi
2025-01-10T20:02:49.348+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hannoemi
2025-01-10T20:02:49.348+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T20:02:49.349+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T20:02:49.349+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T20:02:49.350+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T20:02:49.351+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T20:02:49.351+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T20:02:49.351+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T20:02:49.351+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T20:02:49.351+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T20:02:49.352+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.352+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.352+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.352+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.352+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.352+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T20:02:49.353+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T20:02:49.353+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hannoemi has been evaluated
2025-01-10T20:02:49.356+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hannoemi
2025-01-10T20:02:49.357+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hasanmir
2025-01-10T20:02:49.390+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hasanmir
2025-01-10T20:02:49.394+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hasanmir has been evaluated
2025-01-10T20:02:49.397+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hasanmir
2025-01-10T20:02:49.398+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of herczmax
2025-01-10T20:02:49.401+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets1'.
2025-01-10T20:02:49.404+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets2'.
2025-01-10T20:02:49.408+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T20:02:49.410+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets4'.
2025-01-10T20:02:49.413+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets5'.
2025-01-10T20:02:49.414+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets6'.
2025-01-10T20:02:49.417+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets7'.
2025-01-10T20:02:49.419+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets8'.
2025-01-10T20:02:49.421+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets9'.
2025-01-10T20:02:49.422+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets10'.
2025-01-10T20:02:49.431+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'tickets3'.
2025-01-10T20:02:49.438+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of herczmax
2025-01-10T20:02:49.440+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of herczmax has been evaluated
2025-01-10T20:02:49.443+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for herczmax
2025-01-10T20:02:49.444+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of hliavhan
2025-01-10T20:02:49.472+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of hliavhan
2025-01-10T20:02:49.474+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of hliavhan has been evaluated
2025-01-10T20:02:49.478+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for hliavhan
2025-01-10T20:02:49.479+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of holotdan
2025-01-10T20:02:49.497+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of holotdan
2025-01-10T20:02:49.498+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of holotdan has been evaluated
2025-01-10T20:02:49.505+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for holotdan
2025-01-10T20:02:49.507+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of horejvo1
2025-01-10T20:02:49.547+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of horejvo1
2025-01-10T20:02:49.551+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of horejvo1 has been evaluated
2025-01-10T20:02:49.555+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for horejvo1
2025-01-10T20:02:49.556+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of houskond
2025-01-10T20:02:49.572+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.573+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.573+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.574+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.574+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.575+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.576+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:49.577+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of houskond
2025-01-10T20:02:49.578+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of houskond has been evaluated
2025-01-10T20:02:49.581+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for houskond
2025-01-10T20:02:49.583+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of iusupart
2025-01-10T20:02:49.614+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of iusupart
2025-01-10T20:02:49.616+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of iusupart has been evaluated
2025-01-10T20:02:49.620+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for iusupart
2025-01-10T20:02:49.622+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jafargur
2025-01-10T20:02:49.664+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of jafargur
2025-01-10T20:02:49.665+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T20:02:49.665+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T20:02:49.665+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T20:02:49.665+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T20:02:49.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T20:02:49.667+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.667+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.667+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.667+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.668+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:49.668+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T20:02:49.668+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T20:02:49.669+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of jafargur has been evaluated
2025-01-10T20:02:49.673+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jafargur
2025-01-10T20:02:49.674+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of jagosmar
2025-01-10T20:02:49.688+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of jagosmar
2025-01-10T20:02:49.689+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of jagosmar has been evaluated
2025-01-10T20:02:49.693+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for jagosmar
2025-01-10T20:02:49.694+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kankaluk
2025-01-10T20:02:49.702+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:49.703+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:49.703+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:49.725+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kankaluk
2025-01-10T20:02:49.728+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kankaluk has been evaluated
2025-01-10T20:02:49.732+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kankaluk
2025-01-10T20:02:49.739+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kaufmlu1
2025-01-10T20:02:49.762+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T20:02:49.883+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kaufmlu1
2025-01-10T20:02:49.884+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:49.884+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:49.887+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kaufmlu1 has been evaluated
2025-01-10T20:02:49.897+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kaufmlu1
2025-01-10T20:02:49.898+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kolarj55
2025-01-10T20:02:49.911+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kolarj55
2025-01-10T20:02:49.912+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kolarj55 has been evaluated
2025-01-10T20:02:49.915+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kolarj55
2025-01-10T20:02:49.916+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of krausj13
2025-01-10T20:02:49.948+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of krausj13
2025-01-10T20:02:49.950+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of krausj13 has been evaluated
2025-01-10T20:02:49.954+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for krausj13
2025-01-10T20:02:49.955+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kulikvl1
2025-01-10T20:02:49.970+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kulikvl1
2025-01-10T20:02:49.971+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kulikvl1 has been evaluated
2025-01-10T20:02:49.974+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kulikvl1
2025-01-10T20:02:49.975+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kundrdom
2025-01-10T20:02:50.007+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kundrdom
2025-01-10T20:02:50.009+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kundrdom has been evaluated
2025-01-10T20:02:50.013+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kundrdom
2025-01-10T20:02:50.014+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kunstja2
2025-01-10T20:02:50.022+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'pastaItemIds'.
2025-01-10T20:02:50.033+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kunstja2
2025-01-10T20:02:50.034+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kunstja2 has been evaluated
2025-01-10T20:02:50.038+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kunstja2
2025-01-10T20:02:50.044+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of kvardro2
2025-01-10T20:02:50.069+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 118. Character: '*'.
2025-01-10T20:02:50.262+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of kvardro2
2025-01-10T20:02:50.264+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:50.265+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:50.268+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of kvardro2 has been evaluated
2025-01-10T20:02:50.280+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for kvardro2
2025-01-10T20:02:50.281+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lemakter
2025-01-10T20:02:50.299+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of lemakter
2025-01-10T20:02:50.301+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of lemakter has been evaluated
2025-01-10T20:02:50.305+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lemakter
2025-01-10T20:02:50.306+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of liskaji8
2025-01-10T20:02:50.323+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of liskaji8
2025-01-10T20:02:50.325+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of liskaji8 has been evaluated
2025-01-10T20:02:50.328+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for liskaji8
2025-01-10T20:02:50.329+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of lokajva1
2025-01-10T20:02:50.336+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'request1'.
2025-01-10T20:02:50.347+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of lokajva1
2025-01-10T20:02:50.348+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of lokajva1 has been evaluated
2025-01-10T20:02:50.351+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for lokajva1
2025-01-10T20:02:50.352+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of losinmar
2025-01-10T20:02:50.371+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of losinmar
2025-01-10T20:02:50.372+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of losinmar has been evaluated
2025-01-10T20:02:50.375+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for losinmar
2025-01-10T20:02:50.376+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of majerto4
2025-01-10T20:02:50.377+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a empty parameter
2025-01-10T20:02:50.389+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of majerto4
2025-01-10T20:02:50.390+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of majerto4 has been evaluated
2025-01-10T20:02:50.393+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for majerto4
2025-01-10T20:02:50.394+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mezermat
2025-01-10T20:02:50.404+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of mezermat
2025-01-10T20:02:50.404+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'airports_daily_reports' doesn't exist. Query='db.airports_daily_reports.updateOne({ "_id": 2 },{ $set: { "departures.0.departure_time": "2024-10-02 11:00:00" } });'
2025-01-10T20:02:50.404+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of mezermat has been evaluated
2025-01-10T20:02:50.407+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mezermat
2025-01-10T20:02:50.408+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of mickavo2
2025-01-10T20:02:50.454+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of mickavo2
2025-01-10T20:02:50.459+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of mickavo2 has been evaluated
2025-01-10T20:02:50.464+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for mickavo2
2025-01-10T20:02:50.465+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of moravp15
2025-01-10T20:02:50.483+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of moravp15
2025-01-10T20:02:50.483+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", }});'
2025-01-10T20:02:50.483+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertOne({ "_id": ObjectId(), "userId": "4", "createdAt": ISODate("2023-07-08T08:15:30Z"), "profileBannerColor": "pink", "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "cz", "notificationSettings": { "email": true, "sms": false } }, "securitySettings": { "twoFactorAuth": true, "loginAlerts": false }});'
2025-01-10T20:02:50.483+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.insertMany([{ "_id": ObjectId(), "userId": "2", "createdAt": ISODate("2023-07-10T04:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "locationSubscriptions": [2, 3], "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["user"], "profileSettings": { "theme": "light", "layout": "list", } }{ "_id": ObjectId(), "userId": "3", "createdAt": ISODate("2023-07-11T08:15:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "fr", "notificationSettings": { "email": true, "sms": true } }, "favoriteDevices": ["device_10", "device_22"], "roles": ["user", "tester"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "5", "createdAt": ISODate("2022-04-08T09:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": false, "push": true } }, "roles": ["user"], "locationSubscriptions": [5], "profileSettings": { "theme": "dark", "layout": "grid", } }{ "_id": ObjectId(), "userId": "6", "createdAt": ISODate("2022-12-12T09:18:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": false, "push": false } }, "roles": ["guest"], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }{ "_id": ObjectId(), "userId": "7", "createdAt": ISODate("2022-04-08T10:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": false } }, "roles": ["user", "betaTester"], "favoriteDevices": ["device_15", "device_30"], "profileSettings": { "theme": "blue", "layout": "list", } }{ "_id": ObjectId(), "userId": "8", "createdAt": ISODate("2022-05-08T10:25:50Z"), "premium": false, "adPersonalization": false, "preferences": { "language": "ru", "notificationSettings": { "email": true, "sms": false } }, "roles": ["user"], "locationSubscriptions": [8, 9], "securitySettings": { "twoFactorAuth": true, "loginAlerts": true } }{ "_id": ObjectId(), "userId": "9", "createdAt": ISODate("2024-06-06T19:15:30Z"), "premium": true, "maxDevices": 40, "adPersonalization": true, "preferences": { "language": "de", "notificationSettings": { "email": false, "sms": false, "push": true } }, "roles": ["user", "moderator"], "favoriteDevices": ["device_42"], "profileSettings": { "theme": "minimal", "layout": "grid", } }{ "_id": ObjectId(), "userId": "10", "createdAt": ISODate("2023-01-01T11:12:30Z"), "premium": false, "adPersonalization": true, "preferences": { "language": "en", "notificationSettings": { "email": false, "sms": true, "push": true } }, "roles": ["guest"], "locationSubscriptions": [10], "securitySettings": { "twoFactorAuth": false, "loginAlerts": false } }]);'
2025-01-10T20:02:50.483+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:15:30Z"), "userId": "1", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 24, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:17:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 24, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:19:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 28, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:21:15Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 28, "new_temperature": 30, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:25:30Z"), "userId": "3", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 30, "new_temperature": 10, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:27:30Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 10, "new_temperature": 20, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:29:45Z"), "userId": "4", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 20, "new_temperature": 22, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T08:30:30Z"), "userId": "5", "deviceId": "device_100", "action": "adjust_temperature", "details": { "previous_temperature": 22, "new_temperature": 23, "unit": "Celsius", "method": "mobile_app" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertOne({ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T09:00:00Z"), "userId": "4", "deviceId": "device_200", "action": "unlock", "details": { "location": "Main Entrance", "method": "keycard", "authentication_result": "success" }});'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.insertMany([{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T10:45:00Z"), "userId": "2", "deviceId": "device_300", "action": "view_feed", "details": { "location": "Parking Lot", "duration_seconds": 300, "access_level": "user" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Monday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Tuesday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T11:30:00Z"), "userId": "3", "deviceId": "device_400", "action": "set_schedule", "details": { "schedule": [ { "day": "Saturday", "on_time": "18:00", "off_time": "23:00" }, { "day": "Sunday", "on_time": "18:00", "off_time": "23:00" } ], "timezone": "UTC+1", "method": "web_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:00:00Z"), "userId": "3", "deviceId": "device_500", "action": "turn_on", "details": { "location": "Conference Room", "previous_state": "off", "method": "voice_command", "voice_assistant": "Alexa" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T12:45:00Z"), "userId": "3", "deviceId": "device_600", "action": "lock", "details": { "location": "Server Room", "method": "manual_override", "authentication_result": "n/a" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T13:15:00Z"), "userId": "3", "deviceId": "device_700", "action": "adjust_lighting", "details": { "previous_brightness": 70, "new_brightness": 85, "color": "warm_white", "method": "mobile_app" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-10T05:00:00Z"), "userId": "8", "deviceId": "device_800", "action": "set_alarm", "details": { "alarm_time": "07:00", "recurring": true, "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"], "method": "smart_watch" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-08T14:30:00Z"), "userId": "9", "deviceId": "device_900", "action": "configure_device", "details": { "configuration": { "mode": "eco", "sensitivity": "medium" }, "method": "web_portal" } }{ "_id": ObjectId(), "timestamp": ISODate("2024-10-09T15:00:00Z"), "userId": "10", "deviceId": "device_1000", "action": "reset_device", "details": { "reason": "factory_reset", "method": "hardware_button", "confirmation": true } }]);'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.replaceOne({ "userId": "1" },{ "userId": "1", "createdAt": ISODate("2023-07-08T08:15:30Z"), "roles": ["administrator"], "premium": false, "locationSubscriptions": [1, 4], "adPersonalization": false, "preferences": { "language": "en", "notificationSettings": { "email": true, "sms": true, "push": true } }, "profileSettings": { "theme": "dark", "layout": "grid", } },{ upsert: true });'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "2"},{ $set: {"profileBannerColor": "blue"} });'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $set: {"favoriteDevices": ["device_15", "device_30"]} });'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "8"},{ $unset: {"favoriteDevices": ""} });'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateMany({"premium": true},{ $mul: {"maxDevices": 1.5} });'
2025-01-10T20:02:50.484+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "7"},{ $set: {"preferences.notificationSettings.sms": false} });'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $addToSet: {"favoriteDevices": "device_444"} });'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.updateOne({"userId": "3"},{ $pull: {"favoriteDevices": "device_444"} });'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {userId: "3"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ], },{ userId: 0 }).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ "details.schedule": {$elemMatch: {$or: [{"day": "Saturday"}, {"day": "Sunday"}]}}}).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ {deviceId: "device_100"}, {timestamp: {$gte: ISODate("2024-06-30T00:00:00Z")}} ] },{userId: true, timestamp: true, _id: false}).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.find({ $and: [ { deviceId: "device_100" }, { $expr: { $gt: ["$details.previous_temperature", "$details.new_temperature"] } } ] },{ deviceId: 0 }).sort({ timestamp: -1 }).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.find({roles: {$eq: ["administrator"]}}).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: { deviceId: "device_100" } }{ $lookup: { from: "users", localField: "userId", foreignField: "userId", as: "userDetails" } }{ $project: { timestamp: 1, action: 1, userId: 1, "userDetails.roles": 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {deviceId: "device_100"} }{ $group: {_id: "$userId", count: {$count: {}}} }{ $sort: {count: -1} }{ $project: { _id: 0, "user ID": "$_id" } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $match: {action: "adjust_temperature"} }{ $group: {_id: "$userId", avg_temp: {$avg: "$details.new_temperature"}} }]).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'userLogs' doesn't exist. Query='db.userLogs.aggregate([{ $group: {_id: "$deviceId", latest_activity_at: {$max: "$timestamp"}} }{ $sort: {latest_activity_at: 1} }]).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $group: { _id: "$preferences.language", userCount: { $sum: 1 } } }{ $sort: { userCount: -1 } }{ $skip: 1 }{ $limit: 1 }{ $project: { _id: 0, language: "$_id", userCount: 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'users' doesn't exist. Query='db.users.aggregate([{ $unwind: "$roles" }{ $sort: { roles: 1, createdAt: 1 } }{ $group: { _id: "$roles", firstUserId: { $first: "$userId" }, firstUserCreatedAt: { $first: "$createdAt" } } }{ $project: { _id: 0, role: "$_id", firstUserId: 1, firstUserCreatedAt: 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.485+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of moravp15 has been evaluated
2025-01-10T20:02:50.488+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for moravp15
2025-01-10T20:02:50.489+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of neprater
2025-01-10T20:02:50.535+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of neprater
2025-01-10T20:02:50.539+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of neprater has been evaluated
2025-01-10T20:02:50.543+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for neprater
2025-01-10T20:02:50.544+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ovsyaver
2025-01-10T20:02:50.560+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of ovsyaver
2025-01-10T20:02:50.561+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:50.561+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:50.562+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of ovsyaver has been evaluated
2025-01-10T20:02:50.566+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ovsyaver
2025-01-10T20:02:50.567+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pejsomic
2025-01-10T20:02:50.575+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T20:02:50.575+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T20:02:50.588+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pejsomic
2025-01-10T20:02:50.588+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T20:02:50.588+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T20:02:50.588+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T20:02:50.588+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T20:02:50.588+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T20:02:50.588+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T20:02:50.589+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T20:02:50.589+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T20:02:50.589+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T20:02:50.589+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T20:02:50.589+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T20:02:50.590+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T20:02:50.590+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T20:02:50.590+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T20:02:50.590+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T20:02:50.590+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pejsomic has been evaluated
2025-01-10T20:02:50.593+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pejsomic
2025-01-10T20:02:50.594+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pelikon1
2025-01-10T20:02:50.608+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pelikon1
2025-01-10T20:02:50.609+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pelikon1 has been evaluated
2025-01-10T20:02:50.612+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pelikon1
2025-01-10T20:02:50.613+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of perevyul
2025-01-10T20:02:50.653+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of perevyul
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertOne({ _id: "r001", userId: "u001", bookingId: "b001", roomId: "209", positives: "The room was spacious and had a nice view of the city.", negative: "The air conditioner was not working properly.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.1, tags: ["city-view", "budget-friendly"], createdOn: ISODate("2024-11-20T10:00:00Z")});'
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.insertMany([{ _id: "r002", userId: "u002", bookingId: "b002", roomId: "206", positives: "Close to the beach and very clean.", negative: "No Wi-Fi available in the room.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 3.5 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["beachfront", "no-wifi"], createdOn: ISODate("2024-11-19T14:30:00Z") }{ _id: "r003", userId: "u003", bookingId: "b003", roomId: "209", positives: "Friendly staff and great breakfast options.", negative: "No parking space available.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 3.7 }, { aspect: "Location", score: 3.9 } ], overallScore: 4.0, tags: ["friendly-staff", "great-breakfast"], createdOn: ISODate("2024-11-18T09:15:00Z") }{ _id: "r004", userId: "u004", bookingId: "b004", roomId: "203", positives: "Very quiet area with comfortable beds.", negative: "Far from the city center.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.0 } ], overallScore: 4.2, tags: ["quiet-area", "comfortable-beds"], createdOn: ISODate("2024-11-17T13:45:00Z") }{ _id: "r005", userId: "u005", bookingId: "b005", roomId: "206", positives: "Good room service and quick check-in process.", negative: "Bathroom was too small.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.9 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.2, tags: ["good-room-service", "efficient-checkin"], createdOn: ISODate("2024-11-22T16:00:00Z") }{ _id: "r006", userId: "u006", bookingId: "b006", roomId: "203", positives: "Comfortable bed and helpful staff.", negative: "Noise from the construction site nearby.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 3.6 } ], overallScore: 3.9, tags: ["helpful-staff", "comfortable-bed"], createdOn: ISODate("2024-11-15T12:15:00Z") }{ _id: "r007", userId: "u007", bookingId: "b007", roomId: "203", positives: "Amazing pool area and great cocktails at the bar.", negative: "Wi-Fi coverage was poor in the room.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["pool-area", "great-cocktails"], createdOn: ISODate("2024-11-14T10:30:00Z") }{ _id: "r008", userId: "u008", bookingId: "b008", roomId: "202", positives: "Room had a nice balcony with ocean view.", negative: "Breakfast options were limited.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["ocean-view", "nice-balcony"], createdOn: ISODate("2024-11-13T09:45:00Z") }{ _id: "r009", userId: "u009", bookingId: "b009", roomId: "202", positives: "Great value for money and clean rooms.", negative: "Elevator was too slow.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["value-for-money", "clean-rooms"], createdOn: ISODate("2024-11-12T14:20:00Z") }{ _id: "r010", userId: "u010", bookingId: "b010", roomId: "201", positives: "The view from the room was breathtaking.", negative: "The bed was slightly uncomfortable.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 3.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.3, tags: ["breathtaking-view", "scenic-location"], createdOn: ISODate("2024-10-11T18:30:00Z") }{ _id: "r011", userId: "u011", bookingId: "b011", roomId: "201", positives: "Lovely garden and great spa facilities.", negative: "Rooms were slightly outdated.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.1 }, { aspect: "Amenities", score: 4.5 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["great-spa", "lovely-garden"], createdOn: ISODate("2024-10-10T09:15:00Z") }{ _id: "r012", userId: "u012", bookingId: "b012", roomId: "201", positives: "The breakfast had a wide variety of options.", negative: "The staff seemed unorganized at check-in.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.2, tags: ["wide-breakfast-options", "spacious-room"], createdOn: ISODate("2024-10-09T14:45:00Z") }{ _id: "r013", userId: "u013", bookingId: "b013", roomId: "208", positives: "Quick and hassle-free check-in process.", negative: "No air conditioning in the room.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 3.7 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.0, tags: ["quick-check-in", "no-ac"], createdOn: ISODate("2024-10-08T17:25:00Z") }{ _id: "r014", userId: "u014", bookingId: "b014", roomId: "210", positives: "The staff were very accommodating to special requests.", negative: "The pool was smaller than expected.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["accommodating-staff", "small-pool"], createdOn: ISODate("2024-10-07T16:00:00Z") }{ _id: "r015", userId: "u015", bookingId: "b015", roomId: "206", positives: "Great for families, spacious and clean.", negative: "Noisy neighbors during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.5, tags: ["family-friendly", "spacious-room"], createdOn: ISODate("2024-10-06T11:30:00Z") }{ _id: "r016", userId: "u016", bookingId: "b016", roomId: "208", positives: "The bed was very comfortable and the room was quiet.", negative: "Limited menu for room service.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["comfortable-bed", "quiet-room"], createdOn: ISODate("2024-10-05T20:45:00Z") }{ _id: "r017", userId: "u017", bookingId: "b017", roomId: "210", positives: "Close to major attractions and good connectivity.", negative: "Room was smaller than advertised.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.8 } ], overallScore: 4.3, tags: ["close-to-attractions", "good-transport"], createdOn: ISODate("2024-10-04T12:20:00Z") }{ _id: "r018", userId: "u018", bookingId: "b018", roomId: "210", positives: "Nice design and great for work travel.", negative: "Wi-Fi was slow in the evening.", ratings: [ { aspect: "Cleanliness", score: 4.4 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.9 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.2, tags: ["work-friendly", "modern-design"], createdOn: ISODate("2024-10-03T18:30:00Z") }{ _id: "r019", userId: "u019", bookingId: "b019", roomId: "202", positives: "Staff went above and beyond to ensure our comfort.", negative: "The elevator broke down once during our stay.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["excellent-staff", "minor-elevator-issue"], createdOn: ISODate("2024-10-02T15:45:00Z") }{ _id: "r020", userId: "u020", bookingId: "b020", roomId: "202", positives: "Very clean hotel with a spacious lobby.", negative: "Rooms had no coffee machines.", ratings: [ { aspect: "Cleanliness", score: 4.8 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 3.8 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.3, tags: ["clean-hotel", "spacious-lobby"], createdOn: ISODate("2024-10-01T10:15:00Z") }{ _id: "r021", userId: "u021", bookingId: "b021", roomId: "202", positives: "Friendly staff and prompt room service.", negative: "The air conditioning was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.2 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.1 } ], overallScore: 4.3, tags: ["friendly-staff", "prompt-service"], createdOn: ISODate("2024-10-31T11:15:00Z") }{ _id: "r022", userId: "u022", bookingId: "b022", roomId: "204", positives: "Spacious bathroom and great water pressure.", negative: "Limited parking spaces.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.4 }, { aspect: "Amenities", score: 4.0 }, { aspect: "Location", score: 3.8 } ], overallScore: 4.2, tags: ["spacious-bathroom", "great-water-pressure"], createdOn: ISODate("2024-10-30T15:30:00Z") }{ _id: "r023", userId: "u023", bookingId: "b023", roomId: "208", positives: "Excellent gym facilities and friendly trainers.", negative: "Breakfast area was crowded during peak hours.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.7 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["great-gym", "friendly-trainers"], createdOn: ISODate("2024-10-29T14:45:00Z") }{ _id: "r024", userId: "u024", bookingId: "b024", roomId: "204", positives: "Very quiet location, perfect for relaxing.", negative: "Limited restaurant options nearby.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.8 }, { aspect: "Amenities", score: 4.2 }, { aspect: "Location", score: 4.0 } ], overallScore: 4.4, tags: ["quiet-location", "relaxing-stay"], createdOn: ISODate("2024-10-28T09:50:00Z") }{ _id: "r025", userId: "u025", bookingId: "b025", roomId: "204", positives: "High-speed internet and ergonomic desk chair.", negative: "Small closet space.", ratings: [ { aspect: "Cleanliness", score: 4.3 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.3 } ], overallScore: 4.4, tags: ["work-friendly", "high-speed-internet"], createdOn: ISODate("2024-10-27T18:40:00Z") }{ _id: "r026", userId: "u026", bookingId: "b026", roomId: "207", positives: "Beautiful rooftop pool with panoramic views.", negative: "The elevators were often crowded.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.6 }, { aspect: "Amenities", score: 4.8 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.7, tags: ["rooftop-pool", "amazing-views"], createdOn: ISODate("2024-10-26T12:20:00Z") }{ _id: "r027", userId: "u027", bookingId: "b027", roomId: "203", positives: "Central location and easy access to public transport.", negative: "The lobby area was noisy.", ratings: [ { aspect: "Cleanliness", score: 4.2 }, { aspect: "Comfort", score: 4.0 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.9 } ], overallScore: 4.4, tags: ["central-location", "easy-access"], createdOn: ISODate("2024-10-25T08:55:00Z") }{ _id: "r028", userId: "u028", bookingId: "b028", roomId: "207", positives: "Spacious suites with modern decor.", negative: "Expensive minibar items.", ratings: [ { aspect: "Cleanliness", score: 4.6 }, { aspect: "Comfort", score: 4.7 }, { aspect: "Amenities", score: 4.3 }, { aspect: "Location", score: 4.5 } ], overallScore: 4.5, tags: ["modern-suites", "spacious-rooms"], createdOn: ISODate("2024-10-24T16:30:00Z") }{ _id: "r029", userId: "u029", bookingId: "b029", roomId: "203", positives: "The staff were multilingual and very polite.", negative: "The hotel lacked a dedicated concierge desk.", ratings: [ { aspect: "Cleanliness", score: 4.5 }, { aspect: "Comfort", score: 4.3 }, { aspect: "Amenities", score: 4.1 }, { aspect: "Location", score: 4.2 } ], overallScore: 4.3, tags: ["polite-staff", "multilingual"], createdOn: ISODate("2024-10-23T10:10:00Z") }{ _id: "r030", userId: "u030", bookingId: "b030", roomId: "207", positives: "Excellent in-room dining options and menu variety.", negative: "The check-out process was slow.", ratings: [ { aspect: "Cleanliness", score: 4.7 }, { aspect: "Comfort", score: 4.5 }, { aspect: "Amenities", score: 4.6 }, { aspect: "Location", score: 4.4 } ], overallScore: 4.6, tags: ["excellent-dining", "menu-variety"], createdOn: ISODate("2024-10-22T19:00:00Z") }]);'
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r001" },{ $set: { "ratings.$[elem].score": 4.8 } },{ arrayFilters: [ { "elem.aspect": "Comfort" } ] });'
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({_id: "r006"},{ $set: { "tags.$[element]": "quiet-area" } },{ arrayFilters: [{element:"comfortable-bed"}] });'
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r006" },{ $push: { "ratings": { aspect: "Staff", score: 4.7 } } });'
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateMany({ "roomId": "206" },{ $pull: { "tags": "no-wifi" } });'
2025-01-10T20:02:50.654+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r003" },{ $set: { "ratings.$[elem].score": 4.6 }, $pull: { "tags": "great-breakfast" } },{ arrayFilters: [ { "elem.aspect": "Cleanliness" } ] });'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.updateOne({ "_id": "r031" },{ $addToSet: { "ratings": { aspect: "Staff", score: 4.8 } }, $push: { "tags": "good-location" } },{ upsert: true });'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { "tags": "quiet-area" }, { "negative": { $not: /far from the city center/i } } ]}).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "ratings": { $elemMatch: { "aspect": "Cleanliness", "score": { $lt: 4.4} } }}).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "createdOn": { $gte: ISODate("2024-11-01T00:00:00Z"), $lt: ISODate("2024-11-20T00:00:00Z") } },{ "userId": 0, "_id": 0, "bookingId": 0, "roomId": 0, "tags":0	 }).sort({ "createdOn": 1 }).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "tags":{ $all: [ "friendly-staff", "prompt-service"] }},{ "tags": 1, "ratings": 1 }).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ "overallScore": { $gt: 4.5 } },{ "overallScore": 1, "negative": 1, "_id": 0 }).sort({ "overallScore": 1 }).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ $and: [ { positives: { $regex: "breakfast", $options: "i" } }, { overallScore: { $gt: 4 } }, { createdOn: { $gt: ISODate("2024-10-01T00:00:00Z") } } ] },{ _id: 0, positives: 1, overallScore: 1, ratings: 1,	 createdOn: 1 }).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ overallScore: {$gte: 4.0}, tags: "amazing-views" },{ "_id": 0, "overallScore": 1, "positives": 1,	"tags":1,	"negative": 1 }).forEach(printjson);'
2025-01-10T20:02:50.655+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.find({ ratings: { $all: [ { $elemMatch: { aspect: "Cleanliness", score: { $gte: 4.0 } } }, { $elemMatch: { aspect: "Comfort", score: { $gte: 4.2 } } }, { $elemMatch: { aspect: "Amenities", score: { $gte: 4.5 } } }, { $elemMatch: { aspect: "Location", score: { $gte: 3.0 } } } ] } },{ _id: 0, ratings: 1, overallScore: 1 }).sort({ overallScore: -1 }).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "ratings": { $exists: true } } }{ $group: { _id: "$roomId", avgScore: { $avg: "$overallScore" } } }{ $sort: { avgScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $match: { "overallScore": { $gte: 4.0 } } }{ $group: { _id: "$roomId", reviewCount: { $count: {} } } }{ $sort: { reviewCount: -1 } }{ $limit: 2 }{ $project: { roomId: "$_id", reviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Cleanliness" } }{ $group: { _id: "$roomId", maxCleanlinessScore: { $max: "$ratings.score" }, firstReview: { $first: "$createdOn" } } }{ $sort: { maxCleanlinessScore: -1 } }{ $limit: 1 }{ $project: { roomId: "$_id", maxCleanlinessScore: 1, firstReview: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location" } }{ $group: { _id: "$roomId", minLocationScore: { $min: "$ratings.score" } } }{ $skip: 5 }{ $sort: { minLocationScore: 1 } }{ $project: { roomId: "$_id", minLocationScore: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $unwind: "$ratings" }{ $match: { "ratings.aspect": "Location", "negative": { $not: /noisy|distant/i } } }{ $group: { _id: "$roomId", avgLocationScore: { $avg: "$ratings.score" }, locationReviewCount: { $sum: 1 } , negative: { $push: "$negative" } } }{ $sort: { avgLocationScore: -1 } }{ $limit: 3 }{ $project: { roomId: "$_id", avgLocationScore: 1,	 negative: 1, locationReviewCount: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $group: { _id: "$roomDetails.type", averageScore: { $avg: "$overallScore" }, reviewCount: { $sum: 1 }, averagePrice: { $avg: "$roomDetails.price_per_night" }, } }{ $sort: { averageScore: -1 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'reviews' doesn't exist. Query='db.reviews.aggregate([{ $addFields: { roomIdAsInt: { $toInt: "$roomId" } } }{ $lookup: { from: "rooms", localField: "roomIdAsInt", foreignField: "_id", as: "roomDetails" } }{ $unwind: "$roomDetails" }{ $unwind: "$ratings" }{ $group: { _id: "$roomIdAsInt", avgCleanliness: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Cleanliness"] }, "$ratings.score", null] } }, avgComfort: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Comfort"] }, "$ratings.score", null] } }, avgAmenities: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Amenities"] }, "$ratings.score", null] } }, avgLocation: { $avg: { $cond: [{ $eq: ["$ratings.aspect", "Location"] }, "$ratings.score", null] } }, roomType: { $first: "$roomDetails.type" }, pricePerNight: { $first: "$roomDetails.price_per_night" }, roomSize: { $first: "$roomDetails.size" } } }{ $project: { _id: 1, avgCleanliness: 1, avgComfort: 1, avgAmenities: 1, avgLocation: 1, roomType: 1, pricePerNight: 1, roomSize: 1 } }{ $sort: { avgCleanliness: -1 } }]).forEach(printjson);'
2025-01-10T20:02:50.656+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of perevyul has been evaluated
2025-01-10T20:02:50.660+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for perevyul
2025-01-10T20:02:50.661+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pichajak
2025-01-10T20:02:50.665+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T20:02:50.666+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T20:02:50.670+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pichajak
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 1,		name: "History of E.I.C.",		description: "Some description",		categories: ["history", "India", "Great Britain", "South Asia", "Trade"],		changelog: [{date: new Date("2023-01-01"), editorID: "48", summary:"Some changes"}, {date: new Date("2023-11-29"), editorID: "49", summary:"Further changes"}]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 10,		name: "Coniferous trees",		description: "Different short description",		categories: ["Biology", "plants"],		relatedArtticles:[ 105, 28 ]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 23,		name: "Wels Catfish",		description: "short description",		categories: ["Biology", "animals", "fish", "rivers"],		changelog: [{date: new Date("2023-01-12"), editorID: "47", summary:"Final Changes"}]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 105,		name: "Seqouis National Park",		description: "short description",		categories: ["North America", "National parks", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 45,		name: "Steam Turbine",		year: 1884,		description: "Some description",		categories: ["Engineering", "ships", "industrial revolution"]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 3,		name: "HMS Warspite",		description: "short description",		categories: ["ships", "Great Britain", "The Great War", "Second World war"],		relatedArtticles:[ 45 ]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertOne({_id: 28,		name: "Spruce tree",		description: "Some description",		categories: ["Biology", "plants"],		relatedArtticles:[ 10 ]});'
2025-01-10T20:02:50.670+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.insertMany([{_id: 79,		name: "Sébastien Le Prestre de Vauban",		description: "This description",		categories: ["Engineering", "France", "famous personel"],		changelog: [{date: new Date("2023-05-20"), editorID: "47", summary:"Minor corrections"}]}{_id: 263,		name: "Gulf of Tonkin incident",		year: 1964,		description: "Some description",		categories: ["ships", "SE Asia", "Vietnam", "Vietnam War"],		changelog: [{date: new Date("2023-11-08"), editorID: "48", summary:"Some updates"}, {date: new Date("2024-01-05"), editorID: "49", summary:"Revisons"}]}{_id: 92,		name: "First lunar landing",		year: 1939,		description: "Other description",		categories: ["space", "rockets", "USA", "plants"]}]);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$set: { year: 1969}});'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({$and: [{"changelog.date": {$gte: new Date("2024-01-01")}},			{"changelog.editorID": 47 }]},{$set: {"changelog.editorID": 54}});'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{$pop: { categories: 1}});'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.updateOne({_id: 92},{		$push: { categories: "Space Race" }});'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: { $in: [ "plants", "animals" ] } },{_id:0, name: 1}).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({changelog: {$elemMatch: {$and: [{date: { $gte: new Date("2024-01-01") }}, {date: { $lt: new Date("2025-01-01") }}]}}},{categories: 0, year: 0}).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.find({ categories: {$all: ["ships", "Great Britain"]}},{changelog: 0}).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({ categories: { $in: [ "animals" ] } },{name:1}).sort({"name":1, "_id":1}).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'article' doesn't exist. Query='db.article.find({year: { $gte: 1900}}).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{$match: { categories: { $in: [ "ships"] } } }{$count: "Number of articles in ships category" }]).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $limit: 2}]).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'articles' doesn't exist. Query='db.articles.aggregate([{ $sort: { year: -1 } }{ $skip: 2}]).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{ $unwind: "$changelog" }{ $group: { _id: "$changelog.editorID", editCount: { $sum: 1 } } }{ $sort: { editCount: -1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'collection' doesn't exist. Query='db.collection.aggregate([{$project: {_id: 1, relatedCount: { $size: "$relatedArticles" }}}{$group: {_id: null,maxRelatedCount: { $max: "$relatedCount" }}}]).forEach(printjson);'
2025-01-10T20:02:50.671+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pichajak has been evaluated
2025-01-10T20:02:50.674+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pichajak
2025-01-10T20:02:50.675+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of popelrob
2025-01-10T20:02:50.697+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of popelrob
2025-01-10T20:02:50.699+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of popelrob has been evaluated
2025-01-10T20:02:50.702+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for popelrob
2025-01-10T20:02:50.703+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of pucekrad
2025-01-10T20:02:50.728+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of pucekrad
2025-01-10T20:02:50.730+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of pucekrad has been evaluated
2025-01-10T20:02:50.734+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for pucekrad
2025-01-10T20:02:50.735+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rakusdan
2025-01-10T20:02:50.751+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rakusdan
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.insertMany([{ _id: "intel", name: "Intel", description: "Leading manufacturer of processors and chipsets." }{ _id: "amd", name: "AMD", description: "Innovative provider of processors and GPUs." }{ _id: "nvidia", name: "NVIDIA", description: "World leader in gaming and AI GPUs." }{ _id: "asus", name: "ASUS", description: "Manufacturer of premium motherboards and gaming hardware." }{ _id: "gskill", name: "G.Skill", description: "Specializes in high-performance memory products." }{ _id: "seasonic", name: "Seasonic", description: "High quality power supply manufacturer." }{ _id: "wd", name: "Western Digital", description: "Provider of reliable storage solutions." }{ _id: "corsair", name: "Corsair Gaming", description: "Renowned for PC components and gaming peripherals." }{ _id: "nzxt", name: "NZXT", description: "Focuses on stylish PC cases and cooling solutions." }{ _id: "noctua", name: "Noctua", description: "Known for high-quality, silent cooling solutions." }]);'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertOne({	productId: 1,	name: "Intel Core i9-13900K",	category: "Processors",	brandId: "intel",	details: {		cores: {			physical: 24,			logical: 32,			pcores: 8,			ecores: 16		},		clock: { base: 3.0, boost: 5.8, ebase: 2.2, eboost: 4.3}, power: { TDP: 125, P1: 253, P2: 253}, socket: "LGA1700",		cache: { L3: 36, L2: 20 }, integratedGraphics: "Intel UHD 770"	},	description: "High-end 13th Generation Intel desktop processor. Suitable for the most demanding productivity tasks.",	rating: 4.2});'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.insertMany([{ productId: 2, name: "AMD Ryzen 9 7900X", category: "Processors", brandId: "amd", details: { cores: { physical: 12, logical: 24}, clock: { base: 4.7, boost: 5.6 }, power: { TDP: 170 }, socket: "AM5", cache: { L3: 64, L2: 12 }, integratedGraphics: "Radeon Graphics" },		description: "AMD Ryzen 9 7900X is a powerful gaming and streaming desktop processor.",		rating: 4.4,		lastUpdated: new Date("2024-09-19T14:35:01Z") }{ productId: 5, name: "NVIDIA RTX 4090", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 24, type: "GDDR6X"			},			cores: {				stream: 16384,				tensor: 512,				rt: 128			}, dimensions: { width: 304, height: 61, depth: 137 }, power: {				tdp: 450, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4090 is an enthusiast-class graphics card by NVIDIA.",		rating: 3.9,		lastUpdated: new Date("2024-10-22T12:04:49Z") }{ productId: 7, name: "NVIDIA RTX 4080", category: "Graphics Cards", brandId: "nvidia", details: {			memory: {				total: 16, type: "GDDR6X"			},			cores: {				stream: 9728,				tensor: 304,				rt: 76			}, dimensions: { width: 310, height: 61, depth: 140 }, power: {				tdp: 320, connectors: ["16-pin 12VHPWR"]			}, ports: ["HDMI 2.1", "DisplayPort 1.4a", "DisplayPort 1.4a", "DisplayPort 1.4a"] },		description: "The GeForce RTX 4080 is a high-end graphics card by NVIDIA.",		rating: 3.7,		lastUpdated: new Date("2024-10-19T11:57:07Z") }{ productId: 6, name: "AMD Radeon RX 7900 XT", category: "Graphics Cards", brandId: "amd", details: { memory: {				total: 20, type: "GDDR6"			},			cores: {				stream: 5376,				rt: 84			}, dimensions: { width: 276, height: 51, depth: 110 }, power: {				tdp: 300,				connectors: ["8-pin PCIe", "8-pin PCIe"]			}, ports: ["HDMI 2.1a", "DisplayPort 2.1", "DisplayPort 2.1", "USB Type-C"] },		description: "The Radeon RX 7900 XT is an enthusiast-class graphics card by AMD.",		rating: 4.2 }{ productId: 9, name: "ASUS ROG Strix Z790-E", category: "Motherboards", brandId: "asus", details: { chipset: "Z790", formFactor: "ATX", socket: "LGA1700", ports: ["USB 3.2 ", "USB 3.2", "USB 3.2", "USB 3.2", "Thunderbolt 4", "Thunderbolt 4", "HDMI"], PCIeSlots: { PCIe5: 2, PCIe4: 3 },			features: ["RGB"] },		description: "Premium motherboard for Intel's 13th Generation processors.",		rating: 4.0,		lastUpdated: new Date("2024-10-29T18:31:54Z") }{		productId: 14,		name: "G.Skill Trident Z5 RGB 32GB",		category: "RAM",		brandId: "gskill",		details: {						capacity: 32,			type: "DDR5",			modules: {				count: 2,				size: 16 },			timings: "30-38-38-96",			bandwidth: 48000, voltage: 1.35, features: ["EXPO", "RGB"]		},		description: "High speed RGB DDR5 desktop RAM.",		rating: 4.1,		lastUpdated: new Date("2024-11-12T9:45:24Z")	}{		productId: 18,		name: "WD Black SN850X 2TB",		category: "Storage",		brandId: "wd",		details: {						capacity: 2000, type: "NVMe Gen4", readSpeed: 7300, writeSpeed: 6600		},		description: "The WD Black SN850X is one of the fastest drives around for gaming.",		rating: 4.2,		lastUpdated: new Date("2024-11-04T19:41:07Z")	}{		productId: 23,		name: "Seasonic Focus GX-750 750W",		category: "Power Supplies",		brandId: "seasonic",		details: { wattage: 750, format: "ATX",			modularity: "Fully Modular",			efficiency: "80+ Gold", dimensions: { width: 150, height: 86, depth: 140 },			weight: 1500 },		description: "Mid-range fully modular 80+ Gold certified power supply from Seasonic.",		rating: 4.7	}{ productId: 25, name: "NZXT H510", category: "Cases", brandId: "nzxt", details: { formFactor: "Mid-Tower",			motherboardFormats: ["ATX", "mATX", "mITX"],			psuFormats: ["ATX"], maxGPULength: 381,			maxCoolerHeight: 165,			fans: {				mounts: 4,				included: 2			},			storage: {				twoPointFiveInch: 3,				threePointFiveInch: 3			}, materials: ["Steel", "Tempered Glass"],			features: ["Cable management", "Dust filters"],			dimensions: { width: 210, height: 460, depth: 428 },			weight: 6600 },		description: "Stylish and compact PC case with excellent airflow",		rating: 4.8 }{ productId: 29, name: "Noctua NH-D15", category: "Cooling", brandId: "noctua", details: { type: "Air", fans: [140, 140],			sockets: ["LGA1150", "LGA1151", "LGA1155", "LGA1156", "LGA1200", "LGA1700", "LGA2011", "LGA2011-3", "LGA2066", "LGA1851", "AM4", "AM5"], dimensions: { width: 150, height: 170, depth: 161 }, TDP: 250, features: ["PWM"],			weight: 1320 },		description: "One of the best air coolers on the market from Noctua. Quiet and efficient for even more power hungry CPUs.",		rating: 4.9,		lastUpdated: new Date("2024-11-17T07:58:14Z") }]);'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "seasonic" },{	_id: "seasonic",	name: "Seasonic Electronics",	description: "Taiwanese power supply and computer PSU manufacturer and retailer.",	website: "https://seasonic.com/"});'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'brands' doesn't exist. Query='db.brands.replaceOne({ _id: "gigabyte" },{	_id: "gigabyte",	name: "Gigabyte Technology",	description: "Taiwanese manufacturer and distributor of computer hardware.",	website: "https://www.gigabyte.com/"},{ upsert: true});'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 25 },{ $set: { "description": "Sleek and minimalistic PC case with plenty of helpful additions for a clean and easy build." } });'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ "details.weight": { $ne: null } },{	$mul: { "details.weight": 0.001 } });'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateMany({ lastUpdated: { $exists : false } },{	$set: { lastUpdated: new Date("2024-11-21T16:00:00Z") } });'
2025-01-10T20:02:50.751+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ category: "Motherboards" },{	$unset: { "details.PCIeSlots": "" }});'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$set: {		name: "ASUS TUF GeForce RTX 4090 24G OG GAMING",		brandId: "asus",		"details.dimensions": { width: 325.9, height: 62.8, depth: 140.2 },	}});'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5, "details.ports": "HDMI 2.1" },{	$set: { "details.ports.$": "HDMI 2.1a" } });'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({ productId: 5 },{ $pull: { "details.ports": "DisplayPort 1.4a" } });'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.updateOne({productId: 5},{	$push: { "details.ports": { $each: ["HDMI 2.1a", "DisplayPort 1.4a", "DisplayPort 1.4a"] } },	});'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ $and: [ { category: "Graphics Cards" }, { "details.power.tdp": { $gt: 400 } }, { "details.power.connectors": { $eq: ["16-pin 12VHPWR"] } } ] },{ _id: 0, name: 1, "details.power": 1 }).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Graphics Cards", "details.ports": { $elemMatch: { $regex: /.*DisplayPort.*/ } } },{ _id: 0, name: 1, "details.ports": 1 }).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ "details.features": "RGB" },{_id: 0, name: 1, category: 1, "details.features": 1, rating: 1}).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({lastUpdated: { $gte: new Date("2024-10-25T00:00:00Z"), $lte: new Date("2024-11-25T00:00:00Z")}},{_id: 0, name: 1, lastUpdated: 1}).sort({lastUpdated: -1}).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.find({ category: "Power Supplies", "details.wattage": { $gte: 750 }, "details.modularity": "Fully Modular" },{ _id: 0, name: 1, category: 1, "details.wattage": 1, "details.modularity": 1}).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", count: { $count: {} } } }{ $sort: { count: -1 } }{ $project: { category: "$_id", count: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $match: { category: "Graphics Cards" } }{ $group: { _id: null, avgTDP: { $avg: "$details.power.tdp" } } }{ $project: { avgTDP: 1, _id: 0 } }]).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $lookup: { from: "brands", localField: "brandId", foreignField: "_id", as: "brandDetails" } }{ $sort: { "rating": -1 } }{ $skip: 1 }{ $limit: 2 }{ $project: { _id: 0, name: 1, "rating": 1, "brandDetails.name": 1, "brandDetails.description": 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $sort: { "rating": 1 } }{ $group: { _id: "$category", worstProduct: { $first: "$name" } } }{ $project: { _id: 0, category: "$_id", worstProduct: "$worstProduct" } }]).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'products' doesn't exist. Query='db.products.aggregate([{ $group: { _id: "$category", worstRating: { $min: "$rating" } } }{ $project: { _id: 0, category: "$_id", worstRating: "$worstRating" } }]).forEach(printjson);'
2025-01-10T20:02:50.752+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rakusdan has been evaluated
2025-01-10T20:02:50.755+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rakusdan
2025-01-10T20:02:50.756+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rodrixav
2025-01-10T20:02:50.773+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rodrixav
2025-01-10T20:02:50.775+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rodrixav has been evaluated
2025-01-10T20:02:50.778+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rodrixav
2025-01-10T20:02:50.779+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rudzeanh
2025-01-10T20:02:50.804+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rudzeanh
2025-01-10T20:02:50.805+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertOne({ _id: "player1", firstName: "Alice", lastName: "Smith", nickname: "BluePhoenix", email: "alice.smith@example.com", phoneNumber: "+1234567890", rating: 1200, lastActivityDate: new Date("2024-11-15"), city: { name: "Prague", country: { code: "CZ", name: "Czech Republic" }, latitude: 50.0755, longitude: 14.4378, timeZone: "Europe/Prague" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", } ]});'
2025-01-10T20:02:50.805+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.insertMany([{ _id: "player2", firstName: "Bob", lastName: "Johnson", nickname: "RedFury", email: "bob.johnson@example.com", phoneNumber: "+987654321", rating: 1150, lastActivityDate: new Date("2024-11-20"), city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 52.5200, longitude: 13.4050, timeZone: "Europe/Berlin" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament1", name: "Grand Championship 2024", }, { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player3", firstName: "Charlie", lastName: "Brown", nickname: "AcePlayer", email: "charlie.brown@example.com", phoneNumber: "+111222333", rating: 1300, lastActivityDate: new Date("2024-11-10"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player4", firstName: "Diana", lastName: "Lewis", nickname: "ShadowQueen", email: "diana.lewis@example.com", phoneNumber: "+444555666", rating: 1400, lastActivityDate: new Date("2024-10-25"), city: { name: "Paris", country: { code: "FR", name: "France" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Paris" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player5", firstName: "David", lastName: "Williams", nickname: "DragonKnight", email: "david.williams@example.com", phoneNumber: "+1233212345", rating: 1250, lastActivityDate: new Date("2024-11-12"), city: { name: "London", country: { code: "GB", name: "United Kingdom" }, latitude: 51.5074, longitude: -0.1278, timeZone: "Europe/London" }, preferredGamingPlatform: "PC", preferredGameDuration: "45 minutes", tournaments: [] }{ _id: "player6", firstName: "Eva", lastName: "Parker", nickname: "StormBreaker", email: "eva.parker@example.com", phoneNumber: "+1456789234", rating: 1320, lastActivityDate: new Date("2024-11-10"), city: { name: "New York", country: { code: "US", name: "United States" }, latitude: 40.7128, longitude: -74.0060, timeZone: "America/New_York" }, preferredGamingPlatform: "Console", preferredGameDuration: "90 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player7", firstName: "Frank", lastName: "Adams", nickname: "WildHawk", email: "frank.adams@example.com", phoneNumber: "+1478912345", rating: 1180, lastActivityDate: new Date("2024-11-13"), city: { name: "Los Angeles", country: { code: "US", name: "United States" }, latitude: 34.0522, longitude: -118.2437, timeZone: "America/Los_Angeles" }, preferredGamingPlatform: "Mobile", preferredGameDuration: "30 minutes", tournaments: [] }{ _id: "player8", firstName: "Grace", lastName: "Morris", nickname: "ShadowMist", email: "grace.morris@example.com", phoneNumber: "+1415555678", rating: 1400, lastActivityDate: new Date("2024-11-09"), city: { name: "Sydney", country: { code: "AU", name: "Australia" }, latitude: -33.8688, longitude: 151.2093, timeZone: "Australia/Sydney" }, preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", } ] }{ _id: "player9", firstName: "Henry", lastName: "Taylor", nickname: "IronFist", email: "henry.taylor@example.com", phoneNumber: "+1487654321", rating: 1280, lastActivityDate: new Date("2024-11-14"), city: { name: "Toronto", country: { code: "CA", name: "Canada" }, latitude: 43.65107, longitude: -79.347015, timeZone: "America/Toronto" }, preferredGamingPlatform: "Console", preferredGameDuration: "60 minutes", tournaments: [] }{ _id: "player10", firstName: "Isabella", lastName: "Davis", nickname: "NightShade", email: "isabella.davis@example.com", phoneNumber: "+1501234567", rating: 1340, lastActivityDate: new Date("2024-11-18"), city: { name: "Madrid", country: { code: "ES", name: "Spain" }, latitude: 40.4168, longitude: -3.7038, timeZone: "Europe/Madrid" }, preferredGamingPlatform: "PC", preferredGameDuration: "90 minutes", tournaments: [] }]);'
2025-01-10T20:02:50.805+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament1", name: "Grand Championship 2024", shortName: "GC2024", edition: "Spring Edition", startDate: new Date("2024-04-01"), endDate: new Date("2024-04-10"), registrationStatus: "open", status: "active", description: "A high-stakes gaming championship for elite players.", games: [ { playerBlue: { playerId: "player1", nickname: "BluePhoenix" }, playerRed: { playerId: "player2", nickname: "RedFury" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ]});'
2025-01-10T20:02:50.805+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertOne({ _id: "tournament2", name: "Summer Showdown", shortName: "SS2024", edition: "Summer Edition", startDate: new Date("2024-07-01"), endDate: new Date("2024-07-07"), registrationStatus: "closed", status: "completed", description: "A competitive gaming tournament featuring the best players.", games: [ { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player3", nickname: "AcePlayer" }, winner: { playerId: "player2", nickname: "RedFury" }, startDate: new Date("2024-07-02"), endDate: new Date("2024-07-02"), gameEndType: "Final Scoring" }, { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-03"), endDate: new Date("2024-07-03"), gameEndType: "Time Out" }, { playerBlue: { playerId: "player2", nickname: "RedFury" }, playerRed: { playerId: "player8", nickname: "ShadowMist" }, winner: { playerId: "player8", nickname: "ShadowMist" }, startDate: new Date("2024-07-04"), endDate: new Date("2024-07-04"), gameEndType: "Final Scoring" } ]});'
2025-01-10T20:02:50.805+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.insertMany([{ _id: "tournament3", name: "Summer Battle 2024", shortName: "SB2024", edition: "Summer Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-05"), registrationStatus: "closed", status: "active", description: "A thrilling summer event for competitive gamers to prove their skills.", games: [] }{ _id: "tournament4", name: "Autumn Showdown 2024", shortName: "AS2024", edition: "Autumn Edition", startDate: new Date("2024-09-10"), endDate: new Date("2024-09-15"), registrationStatus: "open", status: "inactive", description: "The Autumn Showdown brings out the best players for intense competition.", games: [] }{ _id: "tournament5", name: "Winter Legends 2024", shortName: "WL2024", edition: "Winter Edition", startDate: new Date("2024-12-01"), endDate: new Date("2024-12-05"), registrationStatus: "open", status: "active", description: "The Winter Legends tournament features epic battles for global supremacy.", games: [] }{ _id: "tournament6", name: "Global Arena Championship 2024", shortName: "GAC2024", edition: "Global Edition", startDate: new Date("2024-07-15"), endDate: new Date("2024-07-25"), registrationStatus: "closed", status: "active", description: "The world’s best players come together in the most prestigious global arena.", games: [] }{ _id: "tournament7", name: "Spring Brawl 2024", shortName: "SB2024", edition: "Spring Edition", startDate: new Date("2024-03-01"), endDate: new Date("2024-03-10"), registrationStatus: "open", status: "active", description: "A fast-paced spring event that features fierce competition and tactical gameplay.", games: [] }{ _id: "tournament8", name: "Midnight Clash 2024", shortName: "MC2024", edition: "Special Edition", startDate: new Date("2024-10-01"), endDate: new Date("2024-10-05"), registrationStatus: "closed", status: "inactive", description: "A special edition tournament set under the midnight sky for night owls.", games: [] }{ _id: "tournament9", name: "Legends of the Arena 2024", shortName: "LOA2024", edition: "Global Legends Edition", startDate: new Date("2024-08-10"), endDate: new Date("2024-08-20"), registrationStatus: "open", status: "active", description: "The ultimate arena tournament where legends are made.", games: [] }{ _id: "tournament10", name: "Rising Stars 2024", shortName: "RS2024", edition: "Rising Stars Edition", startDate: new Date("2024-05-05"), endDate: new Date("2024-05-10"), registrationStatus: "open", status: "active", description: "A showcase for rising stars in the gaming world, with new talent emerging.", games: [] }]);'
2025-01-10T20:02:50.806+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament10" },{ $set: { name: "Rising Legends 2024", shortName: "RL2024", edition: "Legends Rising Edition", startDate: new Date("2024-06-01"), endDate: new Date("2024-06-07"), registrationStatus: "closed", status: "inactive", description: "A prestigious tournament celebrating the legends in the making.", games: [] } });'
2025-01-10T20:02:50.806+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.updateOne({ _id: "tournament3" },{ $set: { games: [ { playerBlue: { playerId: "player6", nickname: "StormBreaker" }, playerRed: { playerId: "player7", nickname: "WildHawk" }, winner: { playerId: "player7", nickname: "WildHawk" }, startDate: new Date("2024-04-02"), endDate: new Date("2024-04-02"), gameEndType: "Final Scoring" } ] } });'
2025-01-10T20:02:50.806+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player6" },{ $set: { tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown", }, { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T20:02:50.806+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $set: { tournaments: [ { tournamentId: "tournament3", name: "Summer Battle 2024", } ] } });'
2025-01-10T20:02:50.806+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $mul: { rating: 1.1 } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player7" },{ $inc: { rating: 100 } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $set: { lastLoginDate: new Date() } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({},{ $unset: { lastLoginDate: "" } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player3" },{ $set: { "city.name": "Brno", "city.country.code": "CZ", "city.country.name": "Czech Republic" } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateMany({ "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$.name": "Summer Royal Battle 2024" } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $push: { tournaments: { tournamentId: "tournament3", name: "Summer Royal Battle 2024" } } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10", "tournaments.tournamentId": "tournament3" },{ $set: { "tournaments.$": { tournamentId: "tournament4", name: "Autumn Showdown 2024" } } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player10" },{ $pull: { tournaments: { tournamentId: "tournament4" } } });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Berlin", country: { code: "DE", name: "Germany" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Germany" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.updateOne({ _id: "player11" },{ $set: { city: { name: "Brno", country: { code: "CZ", name: "Czech Republic" }, latitude: 48.8566, longitude: 2.3522, timeZone: "Europe/Czechia" }, }, $setOnInsert: { firstName: "Chris", lastName: "Doe", nickname: "DoeDoeDoe", email: "chris.doe@example.com", phoneNumber: "+744555760", rating: 1500, lastActivityDate: new Date(), preferredGamingPlatform: "PC", preferredGameDuration: "60 minutes", tournaments: [] } },{ upsert: true });'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ rating: { $gt: 1000 }, tournaments: { $exists: true, $ne: [] } },{ firstName: 1, lastName: 1, rating: 1 }).sort({ rating: -1 }).forEach(printjson);'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ $and: [ { startDate: { $gt: new Date("2024-08-01") } }, { $or: [ { status: "active" }, { registrationStatus: "open" } ] } ] }).forEach(printjson);'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ "city.name": "Prague", tournaments: { $elemMatch: { tournamentId: "tournament1" } } },{ _id: 0, firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ $and: [ { tournaments: { $elemMatch: { name: { $ne: "Summer Showdown" } } } }, { rating: { $lt: 1200 } } ] },{ phoneNumber: 0 }).forEach(printjson);'
2025-01-10T20:02:50.807+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.find({ games: { $size: 0 }, description: { $regex: /legends/i } }).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.find({ tournaments: [ { tournamentId: "tournament2", name: "Summer Showdown" } ] },{ firstName: 1, lastName: 1, tournaments: 1 }).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $group: { _id: "Summer Showdown", averageRating: { $avg: "$rating" } } }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$tournaments.name", totalParticipants: { $sum: 1 } } }{ $sort: { totalParticipants: -1 } }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $lookup: { from: "tournaments", localField: "tournaments.tournamentId", foreignField: "_id", as: "tournamentDetails" } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gt: new Date("2024-08-01") } } }{ $group: { _id: null, earliestStartDate: { $min: "$startDate" } } }{ $project: { _id: 0, earliestStartDate: 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $match: { "tournaments.name": "Summer Showdown" } }{ $project: { _id: 0, firstName: 1, lastName: 1, tournaments: 1 } }{ $skip: 2 }{ $limit: 5 }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $sort: { rating: -1 } }{ $skip: 2 }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'tournaments' doesn't exist. Query='db.tournaments.aggregate([{ $match: { startDate: { $gte: new Date("2024-01-01"), $lt: new Date("2025-01-01") } } }{ $count: "totalTournamentsIn2024" }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'players' doesn't exist. Query='db.players.aggregate([{ $unwind: "$tournaments" }{ $group: { _id: "$_id", playerFullName: { $first: { $concat: ["$firstName", " ", "$lastName"] } }, firstTournament: { $first: "$tournaments.name" } } }{ $sort: { playerFullName: 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.808+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rudzeanh has been evaluated
2025-01-10T20:02:50.813+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rudzeanh
2025-01-10T20:02:50.814+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of rystidia
2025-01-10T20:02:50.844+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of rystidia
2025-01-10T20:02:50.845+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of rystidia has been evaluated
2025-01-10T20:02:50.849+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for rystidia
2025-01-10T20:02:50.850+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of shaninee
2025-01-10T20:02:50.869+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of shaninee
2025-01-10T20:02:50.871+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of shaninee has been evaluated
2025-01-10T20:02:50.874+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for shaninee
2025-01-10T20:02:50.875+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sobotvo2
2025-01-10T20:02:50.882+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal1'.
2025-01-10T20:02:50.883+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'signal2'.
2025-01-10T20:02:50.895+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of sobotvo2
2025-01-10T20:02:50.896+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertOne({ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0 });'
2025-01-10T20:02:50.896+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80 }{ type: "Railway Crossing", name: "RC1", location: { city: "Tabor", street: "Rokycanova" }, operational: true, barrierState: "closed", uniqueAddress: 2, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC2", location: { city: "Malsice" }, operational: true, barrierState: "open", uniqueAddress: 3, warningLights: "off", sensors: { trainDetected: false } }{ type: "Shunting Light Signal", name: "SH1", location: { station: "Tabor", yard: "East" }, operational: true, colorState: ["red", "white", "red", "white", "red"], uniqueAddress: 4, permittedSpeed: 20, }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60 }{ type: "Railway Crossing", name: "RC3", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "open", uniqueAddress: 6, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Railway Crossing", name: "RC4", location: { city: "Bechyne", street: "Nadrazni" }, operational: true, barrierState: "closed", uniqueAddress: 7, warningLights: "flashing", sensors: { trainDetected: true } }{ type: "Light Signal", name: "SH2", location: { station: "Bechyne", track: 2 }, operational: false, colorState: "off", uniqueAddress: 8, permittedSpeed: 0 }{ type: "Light Signal", name: "4L", location: { station: "Tabor", track: 5 }, operational: true, colorState: "green", uniqueAddress: 9, permittedSpeed: 100 }]);'
2025-01-10T20:02:50.896+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.insertMany([{ type: "Light Signal", name: "1L", location: { station: "Tabor", track: 2 }, operational: true, colorState: "red", uniqueAddress: 0, permittedSpeed: 0, nextSignalId: null }{ type: "Light Signal", name: "2L", location: { station: "Tabor", track: 3 }, operational: true, colorState: "green", uniqueAddress: 1, permittedSpeed: 80, nextSignalId: null }{ type: "Light Signal", name: "3L", location: { station: "Bechyne", track: 1 }, operational: true, colorState: "orange", uniqueAddress: 5, permittedSpeed: 60, nextSignalId: null }]);'
2025-01-10T20:02:50.896+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "1L" });'
2025-01-10T20:02:50.896+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "2L" });'
2025-01-10T20:02:50.896+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.findOne({ name: "3L" });'
2025-01-10T20:02:50.897+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": "Tabor" }, { colorState: ["red", "white"] } ] }).forEach(printjson);'
2025-01-10T20:02:50.897+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $or: [ { "location.station": { $exists: true } }, { permittedSpeed: 0 } ] }).forEach(printjson);'
2025-01-10T20:02:50.897+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ warningLights: "flashing" }).forEach(printjson);'
2025-01-10T20:02:50.897+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { type: "Light Signal" }, { permittedSpeed: { $gt: 50 } } ] }).forEach(printjson);'
2025-01-10T20:02:50.897+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.find({ $and: [ { "location.station": "Tabor" }, { operational: true } ] }).forEach(printjson);'
2025-01-10T20:02:50.897+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor", type: "Light Signal" } }{ $sort: { "location.track": 1 } }{ $limit: 1 }]).forEach(printjson);'
2025-01-10T20:02:50.898+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.station": "Tabor" } }{ $count: "totalAppliancesInTabor" }]).forEach(printjson);'
2025-01-10T20:02:50.898+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { operational: false } }{ $count: "nonOperationalAppliances" }]).forEach(printjson);'
2025-01-10T20:02:50.898+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'appliances' doesn't exist. Query='db.appliances.aggregate([{ $match: { "location.city": "Bechyne", type: "Railway Crossing" } }{ $count: "railwayCrossingsInBechyne" }]).forEach(printjson);'
2025-01-10T20:02:50.898+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of sobotvo2 has been evaluated
2025-01-10T20:02:50.902+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sobotvo2
2025-01-10T20:02:50.903+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stepad10
2025-01-10T20:02:50.913+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of stepad10
2025-01-10T20:02:50.914+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of stepad10 has been evaluated
2025-01-10T20:02:50.917+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stepad10
2025-01-10T20:02:50.918+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of stulcrad
2025-01-10T20:02:50.942+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of stulcrad
2025-01-10T20:02:50.942+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of stulcrad has been evaluated
2025-01-10T20:02:50.946+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for stulcrad
2025-01-10T20:02:50.947+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of sukdojak
2025-01-10T20:02:50.948+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T20:02:50.949+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader expected a string but found ')'.
2025-01-10T20:02:50.953+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Invalid JSON input. Position: 31. Character: '+'.
2025-01-10T20:02:50.960+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of sukdojak
2025-01-10T20:02:50.960+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertOne({ name: "CVE-2024-20771", severity: "medium", researcher: {name: "Copa", "type": "person"}, exploits: ["openSIS 9.1 - SQLi (Authenticated)B"], affectedMachensCount: 5011, date: new Date("2024-01-01")});'
2025-01-10T20:02:50.960+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.insertMany([{ name: "CVE-2023-34319", severity: "unknown", researcher: {name: "Sukdol", type: "person"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)", "openSIS 9.1 - SQLi (Authenticated)"], affectedMachensCount: 5000, date: new Date("2023-07-11") }{ name: "CVE-2023-51767", severity: "high", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 4312, date: new Date("2023-02-01") }{ name: "CVE-2024-47850", severity: "medium", researcher: {name: "Avast", type: "company"}, exploits: ["Calibre-web 0.6.21 - Stored XSS"], affectedMachensCount: 5234856, date: new Date("2024-08-12") }{ name: "CVE-2024-20755", severity: "medium", exploits: ["Invesalius3 - Remote Code Execution"], affectedMachensCount: 50, date: new Date("2024-05-10") }{ name: "CVE-2024-74135", severity: "medium", researcher: {name: "Copa", type: "person"}, affectedMachensCount: 50123, date: new Date("2024-01-12") }{ name: "CVE-2024-22225", severity: "high", exploits: ["Gitea 1.22.0 - Stored XSS"], affectedMachensCount: 5, date: new Date("2024-08-17") }{ name: "CVE-2024-41652", severity: "high", researcher: {name: "Avast", type: "company"}, exploits: ["Aurba 501 - Authenticated RCE", "dizqueTV 1.5.3 - Remote Code Execution (RCE)"], affectedMachensCount: 50445, date: new Date("2024-04-11") }{ name: "CVE-2024-31325", severity: "unknown", researcher: {name: "Avast", type: "company"}, affectedMachensCount: 156456, date: new Date("2024-07-11") }{ name: "CVE-2024-27775", severity: "medium", researcher: {name: "AVG", type: "company"}, exploits: ["NoteMark < 0.13.0 - Stored XSS"], affectedMachensCount: 74589, date: new Date("2024-08-12") }]);'
2025-01-10T20:02:50.960+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.replaceOne({name: "CVE-2024-41652"},{ name: "CVE-2024-77125", severity: "medium", researcher: {name: "Macafee", type: "company"}, exploits: ["dizqueTV 1.5.3 - Remote Code Execution (RCE)"] });'
2025-01-10T20:02:50.961+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$gt: 1000}},{$set: {global: "true"}});'
2025-01-10T20:02:50.961+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.updateMany({affectedMachensCount: {$lt: 9999}},{$unset: {global: ""}});'
2025-01-10T20:02:50.961+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ $and: [ { severity: { $in: ["medium", "high"] } }, { affectedMachensCount: { $lt: 1000 } } ]},{ name: 1, severity: 1, affectedMachensCount: 1, _id: 0 }).sort({affectedMachensCount: -1}).forEach(printjson);'
2025-01-10T20:02:50.961+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.find({ date: { $gte: new ISODate("2023-01-01T00:00:00Z"), $lt: new ISODate("2024-01-01T00:00:00Z") }}).forEach(printjson);'
2025-01-10T20:02:50.961+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $match: {"researcher.type": "company"} }{ $group: { severity: "$severity", totalAffected: { $sum: "$affectedMachensCount" } } }{ $sort: { totalAffected: -1 } }{ $limit: 3 }]).forEach(printjson);'
2025-01-10T20:02:50.962+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $group: { severity: "$severity", maxAffectedMachensCount: { $max: "$affectedMachensCount" } } }]).forEach(printjson);'
2025-01-10T20:02:50.962+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Collection 'vulnerabilities' doesn't exist. Query='db.vulnerabilities.aggregate([{ $sort: { date: 1 } }{ $skip: 2 }{ $limit: 1 }{ $project: { _id: 0, name: 1, severity: 1, date: 1 } }]).forEach(printjson);'
2025-01-10T20:02:50.962+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of sukdojak has been evaluated
2025-01-10T20:02:50.966+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for sukdojak
2025-01-10T20:02:50.967+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of susicpav
2025-01-10T20:02:50.980+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:50.981+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : 
2025-01-10T20:02:50.983+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of susicpav
2025-01-10T20:02:50.984+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:50.984+01:00 ERROR 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.e.checker.bson.QueryMatcher    : Unsupported selector: $expr
2025-01-10T20:02:50.984+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of susicpav has been evaluated
2025-01-10T20:02:50.989+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for susicpav
2025-01-10T20:02:50.990+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of svobola7
2025-01-10T20:02:51.006+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of svobola7
2025-01-10T20:02:51.007+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of svobola7 has been evaluated
2025-01-10T20:02:51.011+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for svobola7
2025-01-10T20:02:51.012+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of thakuvik
2025-01-10T20:02:51.061+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of thakuvik
2025-01-10T20:02:51.064+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of thakuvik has been evaluated
2025-01-10T20:02:51.069+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for thakuvik
2025-01-10T20:02:51.071+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tsayvyac
2025-01-10T20:02:51.114+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of tsayvyac
2025-01-10T20:02:51.115+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of tsayvyac has been evaluated
2025-01-10T20:02:51.121+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tsayvyac
2025-01-10T20:02:51.122+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tumaji10
2025-01-10T20:02:51.123+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : Wasn't expecting a function parameter
2025-01-10T20:02:51.124+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'title'.
2025-01-10T20:02:51.127+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.136+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of tumaji10
2025-01-10T20:02:51.136+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of tumaji10 has been evaluated
2025-01-10T20:02:51.140+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tumaji10
2025-01-10T20:02:51.141+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of tychtjan
2025-01-10T20:02:51.146+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.146+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.147+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.147+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.148+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.149+01:00  WARN 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.model.log.ErrorCollector       : JSON reader was expecting a value but found 'db'.
2025-01-10T20:02:51.162+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of tychtjan
2025-01-10T20:02:51.164+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of tychtjan has been evaluated
2025-01-10T20:02:51.168+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for tychtjan
2025-01-10T20:02:51.170+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of ulcheyev
2025-01-10T20:02:51.207+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of ulcheyev
2025-01-10T20:02:51.209+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of ulcheyev has been evaluated
2025-01-10T20:02:51.214+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for ulcheyev
2025-01-10T20:02:51.214+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of umlaspro
2025-01-10T20:02:51.225+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of umlaspro
2025-01-10T20:02:51.226+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of umlaspro has been evaluated
2025-01-10T20:02:51.231+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for umlaspro
2025-01-10T20:02:51.232+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully read the script of vonasmic
2025-01-10T20:02:51.248+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Successfully parsed the script of vonasmic
2025-01-10T20:02:51.249+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.a.evaluation.StudentEvaluator    : Script of vonasmic has been evaluated
2025-01-10T20:02:51.253+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [main] c.c.f.m.p.AssignmentEvaluator            : Successfully generated output for vonasmic
2025-01-10T20:02:53.245+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-10T20:02:53.257+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-01-10T20:02:53.259+01:00  INFO 13988 --- [mongodb_assignment_evaluator] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
